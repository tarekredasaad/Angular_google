{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\nconst debug = debug_1.default('https-proxy-agent:agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n *\n * @api public\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n    if (!opts) {\n      throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n    }\n    debug('creating new HttpsProxyAgent instance: %o', opts);\n    super(opts);\n    const proxy = Object.assign({}, opts);\n    // If `true`, then connect to the proxy server over TLS.\n    // Defaults to `false`.\n    this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n    // Prefer `hostname` over `host`, and set the `port` if needed.\n    proxy.host = proxy.hostname || proxy.host;\n    if (typeof proxy.port === 'string') {\n      proxy.port = parseInt(proxy.port, 10);\n    }\n    if (!proxy.port && proxy.host) {\n      proxy.port = this.secureProxy ? 443 : 80;\n    }\n    // ALPN is supported by Node.js >= v5.\n    // attempt to negotiate http/1.1 for proxy servers that support http/2\n    if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n      proxy.ALPNProtocols = ['http 1.1'];\n    }\n    if (proxy.host && proxy.path) {\n      // If both a `host` and `path` are specified then it's most likely\n      // the result of a `url.parse()` call... we need to remove the\n      // `path` portion so that `net.connect()` doesn't attempt to open\n      // that as a Unix socket file.\n      delete proxy.path;\n      delete proxy.pathname;\n    }\n    this.proxy = proxy;\n  }\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   *\n   * @api protected\n   */\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        proxy,\n        secureProxy\n      } = this;\n      // Create a socket connection to the proxy server.\n      let socket;\n      if (secureProxy) {\n        debug('Creating `tls.Socket`: %o', proxy);\n        socket = tls_1.default.connect(proxy);\n      } else {\n        debug('Creating `net.Socket`: %o', proxy);\n        socket = net_1.default.connect(proxy);\n      }\n      const headers = Object.assign({}, proxy.headers);\n      const hostname = `${opts.host}:${opts.port}`;\n      let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`;\n      // Inject the `Proxy-Authorization` header if necessary.\n      if (proxy.auth) {\n        headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\n      }\n      // The `Host` header should only include the port\n      // number when it is not the default port.\n      let {\n        host,\n        port,\n        secureEndpoint\n      } = opts;\n      if (!isDefaultPort(port, secureEndpoint)) {\n        host += `:${port}`;\n      }\n      headers.Host = host;\n      headers.Connection = 'close';\n      for (const name of Object.keys(headers)) {\n        payload += `${name}: ${headers[name]}\\r\\n`;\n      }\n      const proxyResponsePromise = parse_proxy_response_1.default(socket);\n      socket.write(`${payload}\\r\\n`);\n      const {\n        statusCode,\n        buffered\n      } = yield proxyResponsePromise;\n      if (statusCode === 200) {\n        req.once('socket', resume);\n        if (opts.secureEndpoint) {\n          // The proxy is connecting to a TLS server, so upgrade\n          // this socket connection to a TLS connection.\n          debug('Upgrading socket connection to TLS');\n          const servername = opts.servername || opts.host;\n          return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n            socket,\n            servername\n          }));\n        }\n        return socket;\n      }\n      // Some other status code that's not 200... need to re-play the HTTP\n      // header \"data\" events onto the socket once the HTTP machinery is\n      // attached so that the node core `http` can parse and handle the\n      // error status code.\n      // Close the original socket, and a new \"fake\" socket is returned\n      // instead, so that the proxy doesn't get the HTTP request\n      // written to it (which may contain `Authorization` headers or other\n      // sensitive data).\n      //\n      // See: https://hackerone.com/reports/541502\n      socket.destroy();\n      const fakeSocket = new net_1.default.Socket({\n        writable: false\n      });\n      fakeSocket.readable = true;\n      // Need to wait for the \"socket\" event to re-play the \"data\" events.\n      req.once('socket', s => {\n        debug('replaying proxy buffer for failed request');\n        assert_1.default(s.listenerCount('data') > 0);\n        // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n        // this point the HTTP module machinery has been hooked up for\n        // the user.\n        s.push(buffered);\n        s.push(null);\n      });\n      return fakeSocket;\n    });\n  }\n}\nexports.default = HttpsProxyAgent;\nfunction resume(socket) {\n  socket.resume();\n}\nfunction isDefaultPort(port, secure) {\n  return Boolean(!secure && port === 80 || secure && port === 443);\n}\nfunction isHTTPS(protocol) {\n  return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\nfunction omit(obj, ...keys) {\n  const ret = {};\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","net_1","require","tls_1","url_1","assert_1","debug_1","agent_base_1","parse_proxy_response_1","debug","default","HttpsProxyAgent","Agent","constructor","_opts","opts","parse","Error","proxy","assign","secureProxy","isHTTPS","protocol","host","hostname","port","parseInt","ALPNProtocols","path","pathname","callback","req","socket","connect","headers","payload","auth","Buffer","from","toString","secureEndpoint","isDefaultPort","Host","Connection","name","keys","proxyResponsePromise","write","statusCode","buffered","once","resume","servername","omit","destroy","fakeSocket","Socket","writable","readable","s","listenerCount","push","secure","Boolean","test","obj","ret","key","includes"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/https-proxy-agent/dist/agent.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\nconst debug = debug_1.default('https-proxy-agent:agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n *\n * @api public\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n    constructor(_opts) {\n        let opts;\n        if (typeof _opts === 'string') {\n            opts = url_1.default.parse(_opts);\n        }\n        else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n        }\n        debug('creating new HttpsProxyAgent instance: %o', opts);\n        super(opts);\n        const proxy = Object.assign({}, opts);\n        // If `true`, then connect to the proxy server over TLS.\n        // Defaults to `false`.\n        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n        // Prefer `hostname` over `host`, and set the `port` if needed.\n        proxy.host = proxy.hostname || proxy.host;\n        if (typeof proxy.port === 'string') {\n            proxy.port = parseInt(proxy.port, 10);\n        }\n        if (!proxy.port && proxy.host) {\n            proxy.port = this.secureProxy ? 443 : 80;\n        }\n        // ALPN is supported by Node.js >= v5.\n        // attempt to negotiate http/1.1 for proxy servers that support http/2\n        if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n            proxy.ALPNProtocols = ['http 1.1'];\n        }\n        if (proxy.host && proxy.path) {\n            // If both a `host` and `path` are specified then it's most likely\n            // the result of a `url.parse()` call... we need to remove the\n            // `path` portion so that `net.connect()` doesn't attempt to open\n            // that as a Unix socket file.\n            delete proxy.path;\n            delete proxy.pathname;\n        }\n        this.proxy = proxy;\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { proxy, secureProxy } = this;\n            // Create a socket connection to the proxy server.\n            let socket;\n            if (secureProxy) {\n                debug('Creating `tls.Socket`: %o', proxy);\n                socket = tls_1.default.connect(proxy);\n            }\n            else {\n                debug('Creating `net.Socket`: %o', proxy);\n                socket = net_1.default.connect(proxy);\n            }\n            const headers = Object.assign({}, proxy.headers);\n            const hostname = `${opts.host}:${opts.port}`;\n            let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`;\n            // Inject the `Proxy-Authorization` header if necessary.\n            if (proxy.auth) {\n                headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\n            }\n            // The `Host` header should only include the port\n            // number when it is not the default port.\n            let { host, port, secureEndpoint } = opts;\n            if (!isDefaultPort(port, secureEndpoint)) {\n                host += `:${port}`;\n            }\n            headers.Host = host;\n            headers.Connection = 'close';\n            for (const name of Object.keys(headers)) {\n                payload += `${name}: ${headers[name]}\\r\\n`;\n            }\n            const proxyResponsePromise = parse_proxy_response_1.default(socket);\n            socket.write(`${payload}\\r\\n`);\n            const { statusCode, buffered } = yield proxyResponsePromise;\n            if (statusCode === 200) {\n                req.once('socket', resume);\n                if (opts.secureEndpoint) {\n                    // The proxy is connecting to a TLS server, so upgrade\n                    // this socket connection to a TLS connection.\n                    debug('Upgrading socket connection to TLS');\n                    const servername = opts.servername || opts.host;\n                    return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), { socket,\n                        servername }));\n                }\n                return socket;\n            }\n            // Some other status code that's not 200... need to re-play the HTTP\n            // header \"data\" events onto the socket once the HTTP machinery is\n            // attached so that the node core `http` can parse and handle the\n            // error status code.\n            // Close the original socket, and a new \"fake\" socket is returned\n            // instead, so that the proxy doesn't get the HTTP request\n            // written to it (which may contain `Authorization` headers or other\n            // sensitive data).\n            //\n            // See: https://hackerone.com/reports/541502\n            socket.destroy();\n            const fakeSocket = new net_1.default.Socket({ writable: false });\n            fakeSocket.readable = true;\n            // Need to wait for the \"socket\" event to re-play the \"data\" events.\n            req.once('socket', (s) => {\n                debug('replaying proxy buffer for failed request');\n                assert_1.default(s.listenerCount('data') > 0);\n                // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n                // this point the HTTP module machinery has been hooked up for\n                // the user.\n                s.push(buffered);\n                s.push(null);\n            });\n            return fakeSocket;\n        });\n    }\n}\nexports.default = HttpsProxyAgent;\nfunction resume(socket) {\n    socket.resume();\n}\nfunction isDefaultPort(port, secure) {\n    return Boolean((!secure && port === 80) || (secure && port === 443));\n}\nfunction isHTTPS(protocol) {\n    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { GoogleLoginProvider } from \"@abacritt/angularx-social-login\";\nimport { Subject, catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@abacritt/angularx-social-login\";\n// import { EnvironmentUrlService } from './path/to/environment-url.service';\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http,\n    //  private envUrl: EnvironmentUrlService, \n    // private jwtHelper: JwtHelperService,\n    externalAuthService) {\n      this.http = http;\n      this.externalAuthService = externalAuthService;\n      this.apiUrl = 'http://localhost:7189/';\n      this.apiUrl2 = 'https://your-server.com/api/daapi/Account/ExternalLoginta';\n      this.externalAuth = {\n        idToken: \"\",\n        provider: \"\"\n      };\n      this.authChangeSub = new Subject();\n      this.extAuthChangeSub = new Subject();\n      this.authChanged = this.authChangeSub.asObservable();\n      this.extAuthChanged = this.extAuthChangeSub.asObservable();\n      this.signInWithGoogle = () => {\n        this.externalAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n      };\n      this.signOutExternal = () => {\n        this.externalAuthService.signOut();\n      };\n      this.externalAuthService.authState.subscribe(user => {\n        console.log(user);\n        this.user = user;\n        this.externalAuth.idToken = user.idToken;\n        this.externalAuth.provider = user.provider;\n        this.extAuthChangeSub.next(user);\n      });\n    }\n    //'400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n    fetchData() {\n      return this.http.get(this.apiUrl2);\n    }\n    sendUserData(user) {\n      console.log(user);\n      this.externalAuth.idToken = this.user.idToken;\n      this.externalAuth.provider = this.user.provider;\n      console.log(this.externalAuth.idToken);\n      console.log(this.user.idToken);\n      console.log(this.user.provider);\n      console.log(this.externalAuth);\n      return this.http.post(this.apiUrl, this.externalAuth).pipe(catchError(err => {\n        return throwError(() => err.message || \"server error\");\n      }));\n      ;\n    }\n    sendUserDataToApi(userData) {\n      const user = {\n        id: userData.id,\n        email: userData.email,\n        name: userData.name,\n        imageUrl: userData.imageUrl\n      };\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocialAuthService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { GoogleLoginProvider } from \"@abacritt/angularx-social-login\";\nimport { Subject, catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@abacritt/angularx-social-login\";\n// import { EnvironmentUrlService } from './path/to/environment-url.service';\nclass AuthService {\n  constructor(http,\n  //  private envUrl: EnvironmentUrlService, \n  // private jwtHelper: JwtHelperService,\n  externalAuthService) {\n    this.http = http;\n    this.externalAuthService = externalAuthService;\n    this.apiUrl = 'http://localhost:7189/';\n    this.apiUrl2 = 'https://your-server.com/api/daapi/Account/ExternalLoginta';\n    this.externalAuth = {\n      idToken: \"\",\n      provider: \"\"\n    };\n    this.authChangeSub = new Subject();\n    this.extAuthChangeSub = new Subject();\n    this.authChanged = this.authChangeSub.asObservable();\n    this.extAuthChanged = this.extAuthChangeSub.asObservable();\n    this.signInWithGoogle = () => {\n      this.externalAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n    };\n    this.signOutExternal = () => {\n      this.externalAuthService.signOut();\n    };\n    this.externalAuthService.authState.subscribe(user => {\n      console.log(user);\n      this.user = user;\n      this.externalAuth.idToken = user.idToken;\n      this.externalAuth.provider = user.provider;\n      this.extAuthChangeSub.next(user);\n    });\n  }\n  //'400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n  fetchData() {\n    return this.http.get(this.apiUrl2);\n  }\n  sendUserData(user) {\n    console.log(user);\n    this.externalAuth.idToken = this.user.idToken;\n    this.externalAuth.provider = this.user.provider;\n    console.log(this.externalAuth.idToken);\n    console.log(this.user.idToken);\n    console.log(this.user.provider);\n    console.log(this.externalAuth);\n    return this.http.post(this.apiUrl, this.externalAuth).pipe(catchError(err => {\n      return throwError(() => err.message || \"server error\");\n    }));\n    ;\n  }\n  sendUserDataToApi(userData) {\n    const user = {\n      id: userData.id,\n      email: userData.email,\n      name: userData.name,\n      imageUrl: userData.imageUrl\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocialAuthService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["GoogleLoginProvider","Subject","catchError","throwError","AuthService","constructor","http","externalAuthService","apiUrl","apiUrl2","externalAuth","idToken","provider","authChangeSub","extAuthChangeSub","authChanged","asObservable","extAuthChanged","signInWithGoogle","signIn","PROVIDER_ID","signOutExternal","signOut","authState","subscribe","user","console","log","next","fetchData","get","sendUserData","post","pipe","err","message","sendUserDataToApi","userData","id","email","name","imageUrl","i0","ɵɵinject","i1","HttpClient","i2","SocialAuthService","factory","ɵfac","providedIn"],"sources":["D:\\graduation project\\Graduation_Project-Dubbizel--main\\Graduation_Project-Dubbizel--main\\Dubbizel_Angular\\src\\app\\Service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SocialAuthService, SocialUser } from \"@abacritt/angularx-social-login\";\nimport { GoogleLoginProvider } from \"@abacritt/angularx-social-login\";\nimport { Subject, catchError, throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { ExternalAuthDto } from '../interfaces/ExternalAuthDto';\n// import { EnvironmentUrlService } from './path/to/environment-url.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:7189/';\n  private apiUrl2 = 'https://your-server.com/api/daapi/Account/ExternalLoginta';\n\n  user:any\n  externalAuth:ExternalAuthDto = {\n    idToken:\"\",\n    provider:\"\"\n  }\n  private authChangeSub = new Subject<boolean>();\nprivate extAuthChangeSub = new Subject<SocialUser>();\npublic authChanged = this.authChangeSub.asObservable();\npublic extAuthChanged = this.extAuthChangeSub.asObservable();\nconstructor(private http: HttpClient,\n  //  private envUrl: EnvironmentUrlService, \n  // private jwtHelper: JwtHelperService,\n   private externalAuthService: SocialAuthService) { \n    this.externalAuthService.authState.subscribe((user) => {\n      console.log(user)\n      this.user = user\n      this.externalAuth.idToken = user.idToken\n      this.externalAuth.provider = user.provider\n\n      this.extAuthChangeSub.next(user);\n    })\n  }\n  //'400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n  fetchData() {\n    return this.http.get(this.apiUrl2);\n  }\n  public signInWithGoogle = ()=> {\n    this.externalAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  sendUserData(user: any) {\n    \n    console.log(user)\n    this.externalAuth.idToken = this.user.idToken\n    this.externalAuth.provider = this.user.provider\n    console.log(this.externalAuth.idToken)\n    console.log(this.user.idToken)\n    console.log(this.user.provider)\n    console.log(this.externalAuth)\n    return this.http.post(this.apiUrl, this.externalAuth).pipe(catchError((err: { message: any; }) => {\n      return throwError(() => err.message || \"server error\");\n    }));;\n  }\n  sendUserDataToApi(userData: any): void {\n    const user = {\n      id: userData.id,\n      email: userData.email,\n      name: userData.name,\n      imageUrl: userData.imageUrl,\n    };\n  }\n  public signOutExternal = () => {\n    this.externalAuthService.signOut();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
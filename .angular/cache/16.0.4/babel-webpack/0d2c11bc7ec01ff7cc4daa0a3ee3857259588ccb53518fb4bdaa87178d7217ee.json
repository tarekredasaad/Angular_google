{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeCrypto = void 0;\nconst crypto = require(\"crypto\");\nclass NodeCrypto {\n  sha256DigestBase64(str) {\n    return _asyncToGenerator(function* () {\n      return crypto.createHash('sha256').update(str).digest('base64');\n    })();\n  }\n  randomBytesBase64(count) {\n    return crypto.randomBytes(count).toString('base64');\n  }\n  verify(pubkey, data, signature) {\n    return _asyncToGenerator(function* () {\n      const verifier = crypto.createVerify('sha256');\n      verifier.update(data);\n      verifier.end();\n      return verifier.verify(pubkey, signature, 'base64');\n    })();\n  }\n  sign(privateKey, data) {\n    return _asyncToGenerator(function* () {\n      const signer = crypto.createSign('RSA-SHA256');\n      signer.update(data);\n      signer.end();\n      return signer.sign(privateKey, 'base64');\n    })();\n  }\n  decodeBase64StringUtf8(base64) {\n    return Buffer.from(base64, 'base64').toString('utf-8');\n  }\n  encodeBase64StringUtf8(text) {\n    return Buffer.from(text, 'utf-8').toString('base64');\n  }\n  /**\n   * Computes the SHA-256 hash of the provided string.\n   * @param str The plain text string to hash.\n   * @return A promise that resolves with the SHA-256 hash of the provided\n   *   string in hexadecimal encoding.\n   */\n  sha256DigestHex(str) {\n    return _asyncToGenerator(function* () {\n      return crypto.createHash('sha256').update(str).digest('hex');\n    })();\n  }\n  /**\n   * Computes the HMAC hash of a message using the provided crypto key and the\n   * SHA-256 algorithm.\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n   * @param msg The plain text message.\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n   *   format.\n   */\n  signWithHmacSha256(key, msg) {\n    return _asyncToGenerator(function* () {\n      const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n      return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n    })();\n  }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\nfunction toArrayBuffer(buffer) {\n  return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\nfunction toBuffer(arrayBuffer) {\n  return Buffer.from(arrayBuffer);\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","NodeCrypto","crypto","sha256DigestBase64","str","createHash","update","digest","randomBytesBase64","count","randomBytes","toString","verify","pubkey","data","signature","verifier","createVerify","end","sign","privateKey","signer","createSign","decodeBase64StringUtf8","base64","Buffer","from","encodeBase64StringUtf8","text","sha256DigestHex","signWithHmacSha256","key","msg","cryptoKey","toBuffer","toArrayBuffer","createHmac","buffer","slice","byteOffset","byteLength","arrayBuffer"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/crypto/node/crypto.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeCrypto = void 0;\nconst crypto = require(\"crypto\");\nclass NodeCrypto {\n    async sha256DigestBase64(str) {\n        return crypto.createHash('sha256').update(str).digest('base64');\n    }\n    randomBytesBase64(count) {\n        return crypto.randomBytes(count).toString('base64');\n    }\n    async verify(pubkey, data, signature) {\n        const verifier = crypto.createVerify('sha256');\n        verifier.update(data);\n        verifier.end();\n        return verifier.verify(pubkey, signature, 'base64');\n    }\n    async sign(privateKey, data) {\n        const signer = crypto.createSign('RSA-SHA256');\n        signer.update(data);\n        signer.end();\n        return signer.sign(privateKey, 'base64');\n    }\n    decodeBase64StringUtf8(base64) {\n        return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n    encodeBase64StringUtf8(text) {\n        return Buffer.from(text, 'utf-8').toString('base64');\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        return crypto.createHash('sha256').update(str).digest('hex');\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n        return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n    }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\nfunction toArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\nfunction toBuffer(arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
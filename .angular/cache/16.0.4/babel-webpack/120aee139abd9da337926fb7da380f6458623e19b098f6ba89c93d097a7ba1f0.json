{"ast":null,"code":"\"use strict\";\n\n// import { Component, NgZone, OnInit } from '@angular/core';\n// // import { AuthService } from 'src/app/Service/auth.service';\n// import { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\n// import { Subscription } from 'rxjs';\n// import { GoogleAuth } from 'google-auth-library';\n// declare const gapi: any;\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.scss']\n// })\n// export class LoginComponent implements OnInit{\n//   showError:any\n//   user!: SocialUser;\n//   private userSubscription: Subscription | undefined;\n//   constructor(private authService: SocialAuthService,private ngZone: NgZone) {}\n//   ngOnInit(): void {\n//     this.userSubscription = this.authService.authState.subscribe(user => {\n//       this.user = user;\n//     });\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n//       });\n//     });\n//   }\n//   onSignIn(): void {\n//     const auth2 = gapi.auth2.getAuthInstance();\n//     auth2.signIn().then((googleUser: { getAuthResponse: () => { (): any; new(): any; id_token: any; }; }) => {\n//       this.ngZone.run(() => {\n//         const idToken = googleUser.getAuthResponse().id_token;\n//         this.authService.signIn(GoogleLoginProvider.PROVIDER_ID, { idToken }).catch(error => {\n//           console.error('Error signing in:', error);\n//         });\n//       });\n//     });\n//   }\n//   signInWithGoogle(): void {\n//     this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n//       console.error('Error signing in:', error);\n//     });\n//   }\n//   signOut(): void {\n//     this.authService.signOut().catch(error => {\n//       console.error('Error signing out:', error);\n//     });\n//   }\n// //  async ngOnInit(){\n// //   const auth = new GoogleAuth();\n// //   const client = await auth.getClient();\n// // }\n//   // externalLogin = () => {\n//   //   this.showError = false;\n//   //   this.authService.signInWithGoogle();\n//   // }\n// }","map":{"version":3,"names":[],"sources":["D:\\graduation project\\Graduation_Project-Dubbizel--main\\Graduation_Project-Dubbizel--main\\Dubbizel_Angular\\src\\app\\Login\\login\\login.component.ts"],"sourcesContent":["// import { Component, NgZone, OnInit } from '@angular/core';\n// // import { AuthService } from 'src/app/Service/auth.service';\n// import { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\n// import { Subscription } from 'rxjs';\n\n// import { GoogleAuth } from 'google-auth-library';\n\n// declare const gapi: any;\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.scss']\n// })\n\n// export class LoginComponent implements OnInit{\n//   showError:any\n//   user!: SocialUser;\n//   private userSubscription: Subscription | undefined;\n\n//   constructor(private authService: SocialAuthService,private ngZone: NgZone) {}\n\n//   ngOnInit(): void {\n//     this.userSubscription = this.authService.authState.subscribe(user => {\n//       this.user = user;\n//     });\n\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n\n//       });\n//     });\n//   }\n\n//   onSignIn(): void {\n//     const auth2 = gapi.auth2.getAuthInstance();\n//     auth2.signIn().then((googleUser: { getAuthResponse: () => { (): any; new(): any; id_token: any; }; }) => {\n//       this.ngZone.run(() => {\n//         const idToken = googleUser.getAuthResponse().id_token;\n//         this.authService.signIn(GoogleLoginProvider.PROVIDER_ID, { idToken }).catch(error => {\n//           console.error('Error signing in:', error);\n//         });\n//       });\n//     });\n//   }\n\n\n//   signInWithGoogle(): void {\n//     this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n//       console.error('Error signing in:', error);\n//     });\n//   }\n\n//   signOut(): void {\n//     this.authService.signOut().catch(error => {\n//       console.error('Error signing out:', error);\n//     });\n//   }\n// //  async ngOnInit(){\n// //   const auth = new GoogleAuth();\n// //   const client = await auth.getClient();\n\n// // }\n//   // externalLogin = () => {\n//   //   this.showError = false;\n//   //   this.authService.signInWithGoogle();\n//   // }\n// }\n"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { GoogleLoginProvider } from \"@abacritt/angularx-social-login\";\nimport { Subject, catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@abacritt/angularx-social-login\";\n// import { EnvironmentUrlService } from './path/to/environment-url.service';\nclass AuthService {\n  constructor(http,\n  //  private envUrl: EnvironmentUrlService, \n  // private jwtHelper: JwtHelperService,\n  externalAuthService) {\n    this.http = http;\n    this.externalAuthService = externalAuthService;\n    this.apiUrl = 'http://localhost:5115/api/Account/PostUser';\n    this.authChangeSub = new Subject();\n    this.extAuthChangeSub = new Subject();\n    this.authChanged = this.authChangeSub.asObservable();\n    this.extAuthChanged = this.extAuthChangeSub.asObservable();\n    //'400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n    this.signInWithGoogle = () => {\n      this.externalAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n    };\n    this.signOutExternal = () => {\n      this.externalAuthService.signOut();\n    };\n    this.externalAuthService.authState.subscribe(user => {\n      console.log(user);\n      this.user = user;\n      this.extAuthChangeSub.next(user);\n    });\n  }\n  sendUserData(user) {\n    console.log(user);\n    return this.http.post(this.apiUrl, user).pipe(catchError(err => {\n      return throwError(() => err.message || \"server error\");\n    }));\n    ;\n  }\n  sendUserDataToApi(userData) {\n    const user = {\n      id: userData.id,\n      email: userData.email,\n      name: userData.name,\n      imageUrl: userData.imageUrl\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocialAuthService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["GoogleLoginProvider","Subject","catchError","throwError","AuthService","constructor","http","externalAuthService","apiUrl","authChangeSub","extAuthChangeSub","authChanged","asObservable","extAuthChanged","signInWithGoogle","signIn","PROVIDER_ID","signOutExternal","signOut","authState","subscribe","user","console","log","next","sendUserData","post","pipe","err","message","sendUserDataToApi","userData","id","email","name","imageUrl","i0","ɵɵinject","i1","HttpClient","i2","SocialAuthService","factory","ɵfac","providedIn"],"sources":["D:\\graduation project\\Graduation_Project-Dubbizel--main\\Graduation_Project-Dubbizel--main\\Dubbizel_Angular\\src\\app\\Service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SocialAuthService, SocialUser } from \"@abacritt/angularx-social-login\";\nimport { GoogleLoginProvider } from \"@abacritt/angularx-social-login\";\nimport { Subject, catchError, throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n// import { EnvironmentUrlService } from './path/to/environment-url.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5115/api/Account/PostUser';\n  user:any\n  externalAuth\n  private authChangeSub = new Subject<boolean>();\nprivate extAuthChangeSub = new Subject<SocialUser>();\npublic authChanged = this.authChangeSub.asObservable();\npublic extAuthChanged = this.extAuthChangeSub.asObservable();\nconstructor(private http: HttpClient,\n  //  private envUrl: EnvironmentUrlService, \n  // private jwtHelper: JwtHelperService,\n   private externalAuthService: SocialAuthService) { \n    this.externalAuthService.authState.subscribe((user) => {\n      console.log(user)\n      this.user = user\n      this.extAuthChangeSub.next(user);\n    })\n  }\n  //'400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n\n  public signInWithGoogle = ()=> {\n    this.externalAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  sendUserData(user: any) {\n    console.log(user)\n    return this.http.post(this.apiUrl, user).pipe(catchError((err: { message: any; }) => {\n      return throwError(() => err.message || \"server error\");\n    }));;\n  }\n  sendUserDataToApi(userData: any): void {\n    const user = {\n      id: userData.id,\n      email: userData.email,\n      name: userData.name,\n      imageUrl: userData.imageUrl,\n    };\n  }\n  public signOutExternal = () => {\n    this.externalAuthService.signOut();\n  }\n}\n"],"mappings":"AAEA,SAASA,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,OAAO,EAAEC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAEtD;AAGA,MAGaC,WAAW;EAQxBC,YAAoBC,IAAgB;EAClC;EACA;EACSC,mBAAsC;IAH7B,KAAAD,IAAI,GAAJA,IAAI;IAGb,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAVpB,KAAAC,MAAM,GAAG,4CAA4C;IAGrD,KAAAC,aAAa,GAAG,IAAIR,OAAO,EAAW;IACxC,KAAAS,gBAAgB,GAAG,IAAIT,OAAO,EAAc;IAC7C,KAAAU,WAAW,GAAG,IAAI,CAACF,aAAa,CAACG,YAAY,EAAE;IAC/C,KAAAC,cAAc,GAAG,IAAI,CAACH,gBAAgB,CAACE,YAAY,EAAE;IAW1D;IAEO,KAAAE,gBAAgB,GAAG,MAAI;MAC5B,IAAI,CAACP,mBAAmB,CAACQ,MAAM,CAACf,mBAAmB,CAACgB,WAAW,CAAC;IAClE,CAAC;IAeM,KAAAC,eAAe,GAAG,MAAK;MAC5B,IAAI,CAACV,mBAAmB,CAACW,OAAO,EAAE;IACpC,CAAC;IA3BC,IAAI,CAACX,mBAAmB,CAACY,SAAS,CAACC,SAAS,CAAEC,IAAI,IAAI;MACpDC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACX,gBAAgB,CAACc,IAAI,CAACH,IAAI,CAAC;IAClC,CAAC,CAAC;EACJ;EAMAI,YAAYA,CAACJ,IAAS;IACpBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAO,IAAI,CAACf,IAAI,CAACoB,IAAI,CAAC,IAAI,CAAClB,MAAM,EAAEa,IAAI,CAAC,CAACM,IAAI,CAACzB,UAAU,CAAE0B,GAAsB,IAAI;MAClF,OAAOzB,UAAU,CAAC,MAAMyB,GAAG,CAACC,OAAO,IAAI,cAAc,CAAC;IACxD,CAAC,CAAC,CAAC;IAAC;EACN;EACAC,iBAAiBA,CAACC,QAAa;IAC7B,MAAMV,IAAI,GAAG;MACXW,EAAE,EAAED,QAAQ,CAACC,EAAE;MACfC,KAAK,EAAEF,QAAQ,CAACE,KAAK;MACrBC,IAAI,EAAEH,QAAQ,CAACG,IAAI;MACnBC,QAAQ,EAAEJ,QAAQ,CAACI;KACpB;EACH;;AApCW/B,WAAW,C;mBAAXA,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;AAAA;AAAXrC,WAAW,C;SAAXA,WAAW;EAAAsC,OAAA,EAAXtC,WAAW,CAAAuC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPxC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
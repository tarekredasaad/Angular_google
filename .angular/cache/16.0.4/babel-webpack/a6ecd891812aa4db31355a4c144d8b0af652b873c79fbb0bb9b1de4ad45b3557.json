{"ast":null,"code":"// import { Component, NgZone, OnInit } from '@angular/core';\n// // import { AuthService } from 'src/app/Service/auth.service';\n// import { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\n// import { Subscription } from 'rxjs';\nimport { __decorate } from \"tslib\";\n// import { GoogleAuth } from 'google-auth-library';\n// declare const gapi: any;\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.scss']\n// })\n// export class LoginComponent implements OnInit{\n//   showError:any\n//   user!: SocialUser;\n//   private userSubscription: Subscription | undefined;\n//   constructor(private authService: SocialAuthService,private ngZone: NgZone) {}\n//   ngOnInit(): void {\n//     this.userSubscription = this.authService.authState.subscribe(user => {\n//       this.user = user;\n//     });\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n//       });\n//     });\n//   }\n//   onSignIn(): void {\n//     const auth2 = gapi.auth2.getAuthInstance();\n//     auth2.signIn().then((googleUser: { getAuthResponse: () => { (): any; new(): any; id_token: any; }; }) => {\n//       this.ngZone.run(() => {\n//         const idToken = googleUser.getAuthResponse().id_token;\n//         this.authService.signIn(GoogleLoginProvider.PROVIDER_ID, { idToken }).catch(error => {\n//           console.error('Error signing in:', error);\n//         });\n//       });\n//     });\n//   }\n//   signInWithGoogle(): void {\n//     this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n//       console.error('Error signing in:', error);\n//     });\n//   }\n//   signOut(): void {\n//     this.authService.signOut().catch(error => {\n//       console.error('Error signing out:', error);\n//     });\n//   }\n// //  async ngOnInit(){\n// //   const auth = new GoogleAuth();\n// //   const client = await auth.getClient();\n// // }\n//   // externalLogin = () => {\n//   //   this.showError = false;\n//   //   this.authService.signInWithGoogle();\n//   // }\n// }\nimport { Component, ViewChild } from '@angular/core';\nimport { GoogleLoginProvider } from '@abacritt/angularx-social-login';\nlet LoginComponent = class LoginComponent {\n  constructor(AuthService, authService, ngZone) {\n    this.AuthService = AuthService;\n    this.authService = authService;\n    this.ngZone = ngZone;\n  }\n  ngOnInit() {\n    this.authService.authState.subscribe(user => {\n      this.user = user;\n    });\n  }\n  onGoogleSignIn() {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  signInWithGoogle() {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  ngAfterViewInit() {\n    this.renderGoogleSignInButton();\n  }\n  renderGoogleSignInButton() {\n    google.accounts.id.initialize({\n      client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com',\n      callback: response => this.onSignIn()\n    });\n    google.accounts.id.renderButton(this.googleSignInButton.nativeElement, {\n      theme: 'outline',\n      size: 'large',\n      width: '240',\n      height: '50',\n      longtitle: true\n    });\n  }\n  onSignIn() {\n    this.ngZone.run(() => {\n      // const idToken = response.credential;\n      this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n        console.error('Error signing in:', error);\n      });\n    });\n  }\n  signOut() {\n    this.authService.signOut().catch(error => {\n      console.error('Error signing out:', error);\n    });\n  }\n  ngOnDestroy() {\n    if (this.userSubscription) {\n      this.userSubscription.unsubscribe();\n    }\n  }\n};\n__decorate([ViewChild('googleSignInButton', {\n  static: false\n})], LoginComponent.prototype, \"googleSignInButton\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","ViewChild","GoogleLoginProvider","LoginComponent","constructor","AuthService","authService","ngZone","ngOnInit","authState","subscribe","user","onGoogleSignIn","signIn","PROVIDER_ID","signInWithGoogle","ngAfterViewInit","renderGoogleSignInButton","google","accounts","id","initialize","client_id","callback","response","onSignIn","renderButton","googleSignInButton","nativeElement","theme","size","width","height","longtitle","run","catch","error","console","signOut","ngOnDestroy","userSubscription","unsubscribe","__decorate","static","selector","templateUrl","styleUrls"],"sources":["D:\\graduation project\\Graduation_Project-Dubbizel--main\\Graduation_Project-Dubbizel--main\\Dubbizel_Angular\\src\\app\\Login\\login\\login.component.ts"],"sourcesContent":["// import { Component, NgZone, OnInit } from '@angular/core';\n// // import { AuthService } from 'src/app/Service/auth.service';\n// import { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\n// import { Subscription } from 'rxjs';\n\n// import { GoogleAuth } from 'google-auth-library';\n\n// declare const gapi: any;\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.scss']\n// })\n\n// export class LoginComponent implements OnInit{\n//   showError:any\n//   user!: SocialUser;\n//   private userSubscription: Subscription | undefined;\n\n//   constructor(private authService: SocialAuthService,private ngZone: NgZone) {}\n\n//   ngOnInit(): void {\n//     this.userSubscription = this.authService.authState.subscribe(user => {\n//       this.user = user;\n//     });\n\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n\n//       });\n//     });\n//   }\n\n//   onSignIn(): void {\n//     const auth2 = gapi.auth2.getAuthInstance();\n//     auth2.signIn().then((googleUser: { getAuthResponse: () => { (): any; new(): any; id_token: any; }; }) => {\n//       this.ngZone.run(() => {\n//         const idToken = googleUser.getAuthResponse().id_token;\n//         this.authService.signIn(GoogleLoginProvider.PROVIDER_ID, { idToken }).catch(error => {\n//           console.error('Error signing in:', error);\n//         });\n//       });\n//     });\n//   }\n\n\n//   signInWithGoogle(): void {\n//     this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n//       console.error('Error signing in:', error);\n//     });\n//   }\n\n//   signOut(): void {\n//     this.authService.signOut().catch(error => {\n//       console.error('Error signing out:', error);\n//     });\n//   }\n// //  async ngOnInit(){\n// //   const auth = new GoogleAuth();\n// //   const client = await auth.getClient();\n\n// // }\n//   // externalLogin = () => {\n//   //   this.showError = false;\n//   //   this.authService.signInWithGoogle();\n//   // }\n// }\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef, AfterViewInit, NgZone } from '@angular/core';\nimport { SocialAuthService, GoogleLoginProvider , SocialUser } from '@abacritt/angularx-social-login';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/Service/auth.service';\n\ndeclare const google: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy, AfterViewInit {\n  user: any;\n  private userSubscription: any;\n\n  @ViewChild('googleSignInButton', { static: false })\n  googleSignInButton!: ElementRef;\n\n  constructor(private AuthService : ,private authService: SocialAuthService, private ngZone: NgZone) {}\n\n  ngOnInit(): void {\n     this.authService.authState.subscribe(user => {\n      this.user = user;\n    });\n  }\n\n  onGoogleSignIn(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n\n  signInWithGoogle(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  ngAfterViewInit(): void {\n    this.renderGoogleSignInButton();\n  }\n\n  renderGoogleSignInButton(): void {\n    google.accounts.id.initialize({\n      client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com',\n      callback: (response:any) => this.onSignIn()\n    });\n\n    google.accounts.id.renderButton(this.googleSignInButton.nativeElement, {\n      theme: 'outline',\n      size: 'large',\n      width: '240',\n      height: '50',\n      longtitle: true\n    });\n  }\n\n  onSignIn(): void {\n    this.ngZone.run(() => {\n      // const idToken = response.credential;\n      this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n        console.error('Error signing in:', error);\n      });\n    });\n  }\n\n  signOut(): void {\n    this.authService.signOut().catch(error => {\n      console.error('Error signing out:', error);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.userSubscription) {\n      this.userSubscription.unsubscribe();\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAqBC,SAAS,QAA2C,eAAe;AAC1G,SAA4BC,mBAAmB,QAAqB,iCAAiC;AAWrG,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAOzBC,YAAoBC,WAAa,EAAUC,WAA8B,EAAUC,MAAc;IAA7E,KAAAF,WAAW,GAAXA,WAAW;IAAY,KAAAC,WAAW,GAAXA,WAAW;IAA6B,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEpGC,QAAQA,CAAA;IACL,IAAI,CAACF,WAAW,CAACG,SAAS,CAACC,SAAS,CAACC,IAAI,IAAG;MAC3C,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAAA;IACZ,IAAI,CAACN,WAAW,CAACO,MAAM,CAACX,mBAAmB,CAACY,WAAW,CAAC;EAC1D;EAEAC,gBAAgBA,CAAA;IACd,IAAI,CAACT,WAAW,CAACO,MAAM,CAACX,mBAAmB,CAACY,WAAW,CAAC;EAC1D;EACAE,eAAeA,CAAA;IACb,IAAI,CAACC,wBAAwB,EAAE;EACjC;EAEAA,wBAAwBA,CAAA;IACtBC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;MAC5BC,SAAS,EAAE,0EAA0E;MACrFC,QAAQ,EAAGC,QAAY,IAAK,IAAI,CAACC,QAAQ;KAC1C,CAAC;IAEFP,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACM,YAAY,CAAC,IAAI,CAACC,kBAAkB,CAACC,aAAa,EAAE;MACrEC,KAAK,EAAE,SAAS;MAChBC,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE,KAAK;MACZC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE;KACZ,CAAC;EACJ;EAEAR,QAAQA,CAAA;IACN,IAAI,CAAClB,MAAM,CAAC2B,GAAG,CAAC,MAAK;MACnB;MACA,IAAI,CAAC5B,WAAW,CAACO,MAAM,CAACX,mBAAmB,CAACY,WAAW,CAAC,CAACqB,KAAK,CAACC,KAAK,IAAG;QACrEC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAE,OAAOA,CAAA;IACL,IAAI,CAAChC,WAAW,CAACgC,OAAO,EAAE,CAACH,KAAK,CAACC,KAAK,IAAG;MACvCC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,CAAC;EACJ;EAEAG,WAAWA,CAAA;IACT,IAAI,IAAI,CAACC,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAACC,WAAW,EAAE;;EAEvC;CACD;AAxDCC,UAAA,EADCzC,SAAS,CAAC,oBAAoB,EAAE;EAAE0C,MAAM,EAAE;AAAK,CAAE,CAAC,C,yDACnB;AALrBxC,cAAc,GAAAuC,UAAA,EAL1B1C,SAAS,CAAC;EACT4C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW3C,cAAc,CA6D1B;SA7DYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}
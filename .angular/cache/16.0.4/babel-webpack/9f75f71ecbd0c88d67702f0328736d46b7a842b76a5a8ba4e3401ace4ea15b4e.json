{"ast":null,"code":"\"use strict\";\n\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super({\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    });\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims;\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n  createScoped(scopes) {\n    return new JWT({\n      email: this.email,\n      keyFile: this.keyFile,\n      key: this.key,\n      keyId: this.keyId,\n      scopes,\n      subject: this.subject,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Obtains the metadata to be sent with the request.\n   *\n   * @param url the URI being authorized.\n   */\n  getRequestMetadataAsync(url) {\n    var _superprop_getGetRequestMetadataAsync = () => super.getRequestMetadataAsync,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      url = _this.defaultServicePath ? `https://${_this.defaultServicePath}/` : url;\n      const useSelfSignedJWT = !_this.hasUserScopes() && url || _this.useJWTAccessWithScope && _this.hasAnyScopes();\n      if (!_this.apiKey && useSelfSignedJWT) {\n        if (_this.additionalClaims && _this.additionalClaims.target_audience) {\n          const {\n            tokens\n          } = yield _this.refreshToken();\n          return {\n            headers: _this.addSharedMetadataHeaders({\n              Authorization: `Bearer ${tokens.id_token}`\n            })\n          };\n        } else {\n          // no scopes have been set, but a uri has been provided. Use JWTAccess\n          // credentials.\n          if (!_this.access) {\n            _this.access = new jwtaccess_1.JWTAccess(_this.email, _this.key, _this.keyId, _this.eagerRefreshThresholdMillis);\n          }\n          let scopes;\n          if (_this.hasUserScopes()) {\n            scopes = _this.scopes;\n          } else if (!url) {\n            scopes = _this.defaultScopes;\n          }\n          const headers = yield _this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, _this.additionalClaims,\n          // Scopes take precedent over audience for signing,\n          // so we only provide them if useJWTAccessWithScope is on\n          _this.useJWTAccessWithScope ? scopes : undefined);\n          return {\n            headers: _this.addSharedMetadataHeaders(headers)\n          };\n        }\n      } else if (_this.hasAnyScopes() || _this.apiKey) {\n        return _superprop_getGetRequestMetadataAsync().call(_this, url);\n      } else {\n        // If no audience, apiKey, or scopes are provided, we should not attempt\n        // to populate any headers:\n        return {\n          headers: {}\n        };\n      }\n    })();\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n  fetchIdToken(targetAudience) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Create a new gToken for fetching an ID token\n      const gtoken = new gtoken_1.GoogleToken({\n        iss: _this2.email,\n        sub: _this2.subject,\n        scope: _this2.scopes || _this2.defaultScopes,\n        keyFile: _this2.keyFile,\n        key: _this2.key,\n        additionalClaims: {\n          target_audience: targetAudience\n        },\n        transporter: _this2.transporter\n      });\n      yield gtoken.getToken({\n        forceRefresh: true\n      });\n      if (!gtoken.idToken) {\n        throw new Error('Unknown error: Failed to fetch ID token');\n      }\n      return gtoken.idToken;\n    })();\n  }\n  /**\n   * Determine if there are currently scopes available.\n   */\n  hasUserScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n    return this.scopes.length > 0;\n  }\n  /**\n   * Are there any default or user scopes defined.\n   */\n  hasAnyScopes() {\n    if (this.scopes && this.scopes.length > 0) return true;\n    if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n    return false;\n  }\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n  authorizeAsync() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const result = yield _this3.refreshToken();\n      if (!result) {\n        throw new Error('No result returned');\n      }\n      _this3.credentials = result.tokens;\n      _this3.credentials.refresh_token = 'jwt-placeholder';\n      _this3.key = _this3.gtoken.key;\n      _this3.email = _this3.gtoken.iss;\n      return result.tokens;\n    })();\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken ignored\n   * @private\n   */\n  refreshTokenNoCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const gtoken = _this4.createGToken();\n      const token = yield gtoken.getToken({\n        forceRefresh: _this4.isTokenExpiring()\n      });\n      const tokens = {\n        access_token: token.access_token,\n        token_type: 'Bearer',\n        expiry_date: gtoken.expiresAt,\n        id_token: gtoken.idToken\n      };\n      _this4.emit('tokens', tokens);\n      return {\n        res: null,\n        tokens\n      };\n    })();\n  }\n  /**\n   * Create a gToken if it doesn't already exist.\n   */\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes || this.defaultScopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims,\n        transporter: this.transporter\n      });\n    }\n    return this.gtoken;\n  }\n  /**\n   * Create a JWT credentials instance using the given input options.\n   * @param json The input object.\n   */\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    }\n    // Extract the relevant information from the json key file.\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n    this.quotaProjectId = json.quota_project_id;\n  }\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Creates a JWT credentials instance using an API Key for authentication.\n   * @param apiKey The API Key in string form.\n   */\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n    this.apiKey = apiKey;\n  }\n  /**\n   * Using the key or keyFile on the JWT client, obtain an object that contains\n   * the key and the client email.\n   */\n  getCredentials() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (_this5.key) {\n        return {\n          private_key: _this5.key,\n          client_email: _this5.email\n        };\n      } else if (_this5.keyFile) {\n        const gtoken = _this5.createGToken();\n        const creds = yield gtoken.getCredentials(_this5.keyFile);\n        return {\n          private_key: creds.privateKey,\n          client_email: creds.clientEmail\n        };\n      }\n      throw new Error('A key or a keyFile must be provided to getCredentials.');\n    })();\n  }\n}\nexports.JWT = JWT;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","JWT","gtoken_1","jwtaccess_1","oauth2client_1","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","forceRefreshOnFailure","additionalClaims","credentials","refresh_token","expiry_date","createScoped","getRequestMetadataAsync","url","_superprop_getGetRequestMetadataAsync","_this","defaultServicePath","useSelfSignedJWT","hasUserScopes","useJWTAccessWithScope","hasAnyScopes","apiKey","target_audience","tokens","refreshToken","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","defaultScopes","getRequestHeaders","undefined","call","fetchIdToken","targetAudience","_this2","gtoken","GoogleToken","iss","sub","scope","transporter","getToken","forceRefresh","idToken","Error","length","authorize","callback","authorizeAsync","then","r","_this3","result","refreshTokenNoCache","_this4","createGToken","token","isTokenExpiring","access_token","token_type","expiresAt","emit","res","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","_this5","creds","privateKey","clientEmail"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({\n            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n            forceRefreshOnFailure: opts.forceRefreshOnFailure,\n        });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||\n            (this.useJWTAccessWithScope && this.hasAnyScopes());\n        if (!this.apiKey && useSelfSignedJWT) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                let scopes;\n                if (this.hasUserScopes()) {\n                    scopes = this.scopes;\n                }\n                else if (!url) {\n                    scopes = this.defaultScopes;\n                }\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, \n                // Scopes take precedent over audience for signing,\n                // so we only provide them if useJWTAccessWithScope is on\n                this.useJWTAccessWithScope ? scopes : undefined);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        }\n        else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return { headers: {} };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n            transporter: this.transporter,\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n    hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0)\n            return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0)\n            return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n                transporter: this.transporter,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
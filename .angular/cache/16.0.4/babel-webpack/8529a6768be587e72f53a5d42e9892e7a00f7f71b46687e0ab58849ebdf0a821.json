{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.setGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require(\"json-bigint\");\nconst gcp_residency_1 = require(\"./gcp-residency\");\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  }\n  // If no scheme is provided default to HTTP:\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n  return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\nfunction metadataAccessor(_x, _x2) {\n  return _metadataAccessor.apply(this, arguments);\n}\nfunction _metadataAccessor() {\n  _metadataAccessor = _asyncToGenerator(function* (type, options, noResponseRetries = 3, fastFail = false) {\n    options = options || {};\n    if (typeof options === 'string') {\n      options = {\n        property: options\n      };\n    }\n    let property = '';\n    if (typeof options === 'object' && options.property) {\n      property = '/' + options.property;\n    }\n    validate(options);\n    try {\n      const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n      const res = yield requestMethod({\n        url: `${getBaseUrl()}/${type}${property}`,\n        headers: Object.assign({}, exports.HEADERS, options.headers),\n        retryConfig: {\n          noResponseRetries\n        },\n        params: options.params,\n        responseType: 'text',\n        timeout: requestTimeout()\n      });\n      // NOTE: node.js converts all incoming headers to lower case.\n      if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n        throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n      } else if (!res.data) {\n        throw new Error('Invalid response from the metadata service');\n      }\n      if (typeof res.data === 'string') {\n        try {\n          return jsonBigint.parse(res.data);\n        } catch (_a) {\n          /* ignore */\n        }\n      }\n      return res.data;\n    } catch (e) {\n      const err = e;\n      if (err.response && err.response.status !== 200) {\n        err.message = `Unsuccessful response status code. ${err.message}`;\n      }\n      throw e;\n    }\n  });\n  return _metadataAccessor.apply(this, arguments);\n}\nfunction fastFailMetadataRequest(_x3) {\n  return _fastFailMetadataRequest.apply(this, arguments);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fastFailMetadataRequest() {\n  _fastFailMetadataRequest = _asyncToGenerator(function* (options) {\n    const secondaryOptions = {\n      ...options,\n      url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n    };\n    // We race a connection between DNS/IP to metadata server. There are a couple\n    // reasons for this:\n    //\n    // 1. the DNS is slow in some GCP environments; by checking both, we might\n    //    detect the runtime environment signficantly faster.\n    // 2. we can't just check the IP, which is tarpitted and slow to respond\n    //    on a user's local machine.\n    //\n    // Additional logic has been added to make sure that we don't create an\n    // unhandled rejection in scenarios where a failure happens sometime\n    // after a success.\n    //\n    // Note, however, if a failure happens prior to a success, a rejection should\n    // occur, this is for folks running locally.\n    //\n    let responded = false;\n    const r1 = (0, gaxios_1.request)(options).then(res => {\n      responded = true;\n      return res;\n    }).catch(err => {\n      if (responded) {\n        return r2;\n      } else {\n        responded = true;\n        throw err;\n      }\n    });\n    const r2 = (0, gaxios_1.request)(secondaryOptions).then(res => {\n      responded = true;\n      return res;\n    }).catch(err => {\n      if (responded) {\n        return r1;\n      } else {\n        responded = true;\n        throw err;\n      }\n    });\n    return Promise.race([r1, r2]);\n  });\n  return _fastFailMetadataRequest.apply(this, arguments);\n}\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nfunction isAvailable() {\n  return _isAvailable.apply(this, arguments);\n}\nfunction _isAvailable() {\n  _isAvailable = _asyncToGenerator(function* () {\n    try {\n      // If a user is instantiating several GCP libraries at the same time,\n      // this may result in multiple calls to isAvailable(), to detect the\n      // runtime environment. We use the same promise for each of these calls\n      // to reduce the network load.\n      if (cachedIsAvailableResponse === undefined) {\n        cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(),\n        // If the default HOST_ADDRESS has been overridden, we should not\n        // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n        // a non-GCP environment):\n        !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n      }\n      yield cachedIsAvailableResponse;\n      return true;\n    } catch (e) {\n      const err = e;\n      if (process.env.DEBUG_AUTH) {\n        console.info(err);\n      }\n      if (err.type === 'request-timeout') {\n        // If running in a GCP environment, metadata endpoint should return\n        // within ms.\n        return false;\n      }\n      if (err.response && err.response.status === 404) {\n        return false;\n      } else {\n        if (!(err.response && err.response.status === 404) && (\n        // A warning is emitted if we see an unexpected err.code, or err.code\n        // is not populated:\n        !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n          let code = 'UNKNOWN';\n          if (err.code) code = err.code;\n          process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n        }\n        // Failure to resolve the metadata service means that it is not available.\n        return false;\n      }\n    }\n  });\n  return _isAvailable.apply(this, arguments);\n}\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n */\nfunction setGCPResidency(value = null) {\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n  // Detecting the residency can be resource-intensive. Let's cache the result.\n  if (exports.gcpResidencyCache === null) {\n    exports.gcpResidencyCache = (0, gcp_residency_1.detectGCPResidency)();\n  }\n  return exports.gcpResidencyCache ? 0 : 3000;\n}\nexports.requestTimeout = requestTimeout;\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"names":["_asyncToGenerator","require","default","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__exportStar","exports","p","prototype","hasOwnProperty","call","value","requestTimeout","setGCPResidency","gcpResidencyCache","resetIsAvailableCache","isAvailable","project","instance","HEADERS","HEADER_VALUE","HEADER_NAME","SECONDARY_HOST_ADDRESS","HOST_ADDRESS","BASE_PATH","gaxios_1","jsonBigint","gcp_residency_1","freeze","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","_x","_x2","_metadataAccessor","apply","arguments","type","noResponseRetries","fastFail","property","requestMethod","fastFailMetadataRequest","request","res","url","headers","assign","retryConfig","params","responseType","timeout","toLowerCase","data","parse","_a","e","err","response","status","message","_x3","_fastFailMetadataRequest","secondaryOptions","replace","responded","r1","then","catch","r2","Promise","race","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","_isAvailable","DEBUG_AUTH","console","info","code","includes","emitWarning","detectGCPResidency"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/gcp-metadata/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requestTimeout = exports.setGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require(\"json-bigint\");\nconst gcp_residency_1 = require(\"./gcp-residency\");\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({ [exports.HEADER_NAME]: exports.HEADER_VALUE });\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n    if (!baseUrl) {\n        baseUrl =\n            process.env.GCE_METADATA_IP ||\n                process.env.GCE_METADATA_HOST ||\n                exports.HOST_ADDRESS;\n    }\n    // If no scheme is provided default to HTTP:\n    if (!/^https?:\\/\\//.test(baseUrl)) {\n        baseUrl = `http://${baseUrl}`;\n    }\n    return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach(key => {\n        switch (key) {\n            case 'params':\n            case 'property':\n            case 'headers':\n                break;\n            case 'qs':\n                throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nasync function metadataAccessor(type, options, noResponseRetries = 3, fastFail = false) {\n    options = options || {};\n    if (typeof options === 'string') {\n        options = { property: options };\n    }\n    let property = '';\n    if (typeof options === 'object' && options.property) {\n        property = '/' + options.property;\n    }\n    validate(options);\n    try {\n        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n        const res = await requestMethod({\n            url: `${getBaseUrl()}/${type}${property}`,\n            headers: Object.assign({}, exports.HEADERS, options.headers),\n            retryConfig: { noResponseRetries },\n            params: options.params,\n            responseType: 'text',\n            timeout: requestTimeout(),\n        });\n        // NOTE: node.js converts all incoming headers to lower case.\n        if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n            throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n        }\n        else if (!res.data) {\n            throw new Error('Invalid response from the metadata service');\n        }\n        if (typeof res.data === 'string') {\n            try {\n                return jsonBigint.parse(res.data);\n            }\n            catch (_a) {\n                /* ignore */\n            }\n        }\n        return res.data;\n    }\n    catch (e) {\n        const err = e;\n        if (err.response && err.response.status !== 200) {\n            err.message = `Unsuccessful response status code. ${err.message}`;\n        }\n        throw e;\n    }\n}\nasync function fastFailMetadataRequest(options) {\n    const secondaryOptions = {\n        ...options,\n        url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS)),\n    };\n    // We race a connection between DNS/IP to metadata server. There are a couple\n    // reasons for this:\n    //\n    // 1. the DNS is slow in some GCP environments; by checking both, we might\n    //    detect the runtime environment signficantly faster.\n    // 2. we can't just check the IP, which is tarpitted and slow to respond\n    //    on a user's local machine.\n    //\n    // Additional logic has been added to make sure that we don't create an\n    // unhandled rejection in scenarios where a failure happens sometime\n    // after a success.\n    //\n    // Note, however, if a failure happens prior to a success, a rejection should\n    // occur, this is for folks running locally.\n    //\n    let responded = false;\n    const r1 = (0, gaxios_1.request)(options)\n        .then(res => {\n        responded = true;\n        return res;\n    })\n        .catch(err => {\n        if (responded) {\n            return r2;\n        }\n        else {\n            responded = true;\n            throw err;\n        }\n    });\n    const r2 = (0, gaxios_1.request)(secondaryOptions)\n        .then(res => {\n        responded = true;\n        return res;\n    })\n        .catch(err => {\n        if (responded) {\n            return r1;\n        }\n        else {\n            responded = true;\n            throw err;\n        }\n    });\n    return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n    return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n    return metadataAccessor('project', options);\n}\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n    return process.env.DETECT_GCP_RETRIES\n        ? Number(process.env.DETECT_GCP_RETRIES)\n        : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n    try {\n        // If a user is instantiating several GCP libraries at the same time,\n        // this may result in multiple calls to isAvailable(), to detect the\n        // runtime environment. We use the same promise for each of these calls\n        // to reduce the network load.\n        if (cachedIsAvailableResponse === undefined) {\n            cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), \n            // If the default HOST_ADDRESS has been overridden, we should not\n            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n            // a non-GCP environment):\n            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n        }\n        await cachedIsAvailableResponse;\n        return true;\n    }\n    catch (e) {\n        const err = e;\n        if (process.env.DEBUG_AUTH) {\n            console.info(err);\n        }\n        if (err.type === 'request-timeout') {\n            // If running in a GCP environment, metadata endpoint should return\n            // within ms.\n            return false;\n        }\n        if (err.response && err.response.status === 404) {\n            return false;\n        }\n        else {\n            if (!(err.response && err.response.status === 404) &&\n                // A warning is emitted if we see an unexpected err.code, or err.code\n                // is not populated:\n                (!err.code ||\n                    ![\n                        'EHOSTDOWN',\n                        'EHOSTUNREACH',\n                        'ENETUNREACH',\n                        'ENOENT',\n                        'ENOTFOUND',\n                        'ECONNREFUSED',\n                    ].includes(err.code))) {\n                let code = 'UNKNOWN';\n                if (err.code)\n                    code = err.code;\n                process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n            }\n            // Failure to resolve the metadata service means that it is not available.\n            return false;\n        }\n    }\n}\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n    cachedIsAvailableResponse = undefined;\n}\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n */\nfunction setGCPResidency(value = null) {\n    exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n    // Detecting the residency can be resource-intensive. Let's cache the result.\n    if (exports.gcpResidencyCache === null) {\n        exports.gcpResidencyCache = (0, gcp_residency_1.detectGCPResidency)();\n    }\n    return exports.gcpResidencyCache ? 0 : 3000;\n}\nexports.requestTimeout = requestTimeout;\n__exportStar(require(\"./gcp-residency\"), exports);\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AALA,IAAAA,iBAAA,GAAAC,OAAA,uKAAAC,OAAA;AAMA,IAAIC,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,KAAMC,MAAM,CAACC,MAAM,GAAI,UAASC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;EAC5F,IAAIA,EAAE,KAAKC,SAAS,EAAED,EAAE,GAAGD,CAAC;EAC5B,IAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAwB,CAACL,CAAC,EAAEC,CAAC,CAAC;EAChD,IAAI,CAACG,IAAI,KAAK,KAAK,IAAIA,IAAI,GAAG,CAACJ,CAAC,CAACM,UAAU,GAAGF,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACI,YAAY,CAAC,EAAE;IACjFJ,IAAI,GAAG;MAAEK,UAAU,EAAE,IAAI;MAAEC,GAAG,EAAE,SAAAA,CAAA,EAAW;QAAE,OAAOV,CAAC,CAACC,CAAC,CAAC;MAAE;IAAE,CAAC;EAC/D;EACAJ,MAAM,CAACc,cAAc,CAACZ,CAAC,EAAEG,EAAE,EAAEE,IAAI,CAAC;AACtC,CAAC,GAAK,UAASL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;EACxB,IAAIA,EAAE,KAAKC,SAAS,EAAED,EAAE,GAAGD,CAAC;EAC5BF,CAAC,CAACG,EAAE,CAAC,GAAGF,CAAC,CAACC,CAAC,CAAC;AAChB,CAAE,CAAC;AACH,IAAIW,YAAY,GAAI,IAAI,IAAI,IAAI,CAACA,YAAY,IAAK,UAASZ,CAAC,EAAEa,OAAO,EAAE;EACnE,KAAK,IAAIC,CAAC,IAAId,CAAC,EAAE,IAAIc,CAAC,KAAK,SAAS,IAAI,CAACjB,MAAM,CAACkB,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,OAAO,EAAEC,CAAC,CAAC,EAAElB,eAAe,CAACiB,OAAO,EAAEb,CAAC,EAAEc,CAAC,CAAC;AAC7H,CAAC;AACDjB,MAAM,CAACc,cAAc,CAACE,OAAO,EAAE,YAAY,EAAE;EAAEK,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DL,OAAO,CAACM,cAAc,GAAGN,OAAO,CAACO,eAAe,GAAGP,OAAO,CAACQ,iBAAiB,GAAGR,OAAO,CAACS,qBAAqB,GAAGT,OAAO,CAACU,WAAW,GAAGV,OAAO,CAACW,OAAO,GAAGX,OAAO,CAACY,QAAQ,GAAGZ,OAAO,CAACa,OAAO,GAAGb,OAAO,CAACc,YAAY,GAAGd,OAAO,CAACe,WAAW,GAAGf,OAAO,CAACgB,sBAAsB,GAAGhB,OAAO,CAACiB,YAAY,GAAGjB,OAAO,CAACkB,SAAS,GAAG,KAAK,CAAC;AAC3T,MAAMC,QAAQ,GAAGtC,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMuC,UAAU,GAAGvC,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMwC,eAAe,GAAGxC,OAAO,CAAC,iBAAiB,CAAC;AAClDmB,OAAO,CAACkB,SAAS,GAAG,qBAAqB;AACzClB,OAAO,CAACiB,YAAY,GAAG,wBAAwB;AAC/CjB,OAAO,CAACgB,sBAAsB,GAAG,kCAAkC;AACnEhB,OAAO,CAACe,WAAW,GAAG,iBAAiB;AACvCf,OAAO,CAACc,YAAY,GAAG,QAAQ;AAC/Bd,OAAO,CAACa,OAAO,GAAG7B,MAAM,CAACsC,MAAM,CAAC;EAAE,CAACtB,OAAO,CAACe,WAAW,GAAGf,OAAO,CAACc;AAAa,CAAC,CAAC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,UAAUA,CAACC,OAAO,EAAE;EACzB,IAAI,CAACA,OAAO,EAAE;IACVA,OAAO,GACHC,OAAO,CAACC,GAAG,CAACC,eAAe,IACvBF,OAAO,CAACC,GAAG,CAACE,iBAAiB,IAC7B5B,OAAO,CAACiB,YAAY;EAChC;EACA;EACA,IAAI,CAAC,cAAc,CAACY,IAAI,CAACL,OAAO,CAAC,EAAE;IAC/BA,OAAO,GAAI,UAASA,OAAQ,EAAC;EACjC;EACA,OAAO,IAAIM,GAAG,CAAC9B,OAAO,CAACkB,SAAS,EAAEM,OAAO,CAAC,CAACO,IAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,OAAO,EAAE;EACvBjD,MAAM,CAACkD,IAAI,CAACD,OAAO,CAAC,CAACE,OAAO,CAACC,GAAG,IAAI;IAChC,QAAQA,GAAG;MACP,KAAK,QAAQ;MACb,KAAK,UAAU;MACf,KAAK,SAAS;QACV;MACJ,KAAK,IAAI;QACL,MAAM,IAAIC,KAAK,CAAC,wEAAwE,CAAC;MAC7F;QACI,MAAM,IAAIA,KAAK,CAAE,IAAGD,GAAI,wCAAuC,CAAC;IAAC;EAE7E,CAAC,CAAC;AACN;AAAC,SACcE,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,kBAAA;EAAAA,iBAAA,GAAA7D,iBAAA,CAA/B,WAAgCgE,IAAI,EAAEX,OAAO,EAAEY,iBAAiB,GAAG,CAAC,EAAEC,QAAQ,GAAG,KAAK,EAAE;IACpFb,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC7BA,OAAO,GAAG;QAAEc,QAAQ,EAAEd;MAAQ,CAAC;IACnC;IACA,IAAIc,QAAQ,GAAG,EAAE;IACjB,IAAI,OAAOd,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACc,QAAQ,EAAE;MACjDA,QAAQ,GAAG,GAAG,GAAGd,OAAO,CAACc,QAAQ;IACrC;IACAf,QAAQ,CAACC,OAAO,CAAC;IACjB,IAAI;MACA,MAAMe,aAAa,GAAGF,QAAQ,GAAGG,uBAAuB,GAAG9B,QAAQ,CAAC+B,OAAO;MAC3E,MAAMC,GAAG,SAASH,aAAa,CAAC;QAC5BI,GAAG,EAAG,GAAE7B,UAAU,EAAG,IAAGqB,IAAK,GAAEG,QAAS,EAAC;QACzCM,OAAO,EAAErE,MAAM,CAACsE,MAAM,CAAC,CAAC,CAAC,EAAEtD,OAAO,CAACa,OAAO,EAAEoB,OAAO,CAACoB,OAAO,CAAC;QAC5DE,WAAW,EAAE;UAAEV;QAAkB,CAAC;QAClCW,MAAM,EAAEvB,OAAO,CAACuB,MAAM;QACtBC,YAAY,EAAE,MAAM;QACpBC,OAAO,EAAEpD,cAAc;MAC3B,CAAC,CAAC;MACF;MACA,IAAI6C,GAAG,CAACE,OAAO,CAACrD,OAAO,CAACe,WAAW,CAAC4C,WAAW,EAAE,CAAC,KAAK3D,OAAO,CAACc,YAAY,EAAE;QACzE,MAAM,IAAIuB,KAAK,CAAE,qDAAoDrC,OAAO,CAACe,WAAY,UAAS,CAAC;MACvG,CAAC,MACI,IAAI,CAACoC,GAAG,CAACS,IAAI,EAAE;QAChB,MAAM,IAAIvB,KAAK,CAAC,4CAA4C,CAAC;MACjE;MACA,IAAI,OAAOc,GAAG,CAACS,IAAI,KAAK,QAAQ,EAAE;QAC9B,IAAI;UACA,OAAOxC,UAAU,CAACyC,KAAK,CAACV,GAAG,CAACS,IAAI,CAAC;QACrC,CAAC,CACD,OAAOE,EAAE,EAAE;UACP;QAAA;MAER;MACA,OAAOX,GAAG,CAACS,IAAI;IACnB,CAAC,CACD,OAAOG,CAAC,EAAE;MACN,MAAMC,GAAG,GAAGD,CAAC;MACb,IAAIC,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC7CF,GAAG,CAACG,OAAO,GAAI,sCAAqCH,GAAG,CAACG,OAAQ,EAAC;MACrE;MACA,MAAMJ,CAAC;IACX;EACJ,CAAC;EAAA,OAAAtB,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SACcM,uBAAuBA,CAAAmB,GAAA;EAAA,OAAAC,wBAAA,CAAA3B,KAAA,OAAAC,SAAA;AAAA;AAmDtC;AACA;AACA;AACA;AAAA,SAAA0B,yBAAA;EAAAA,wBAAA,GAAAzF,iBAAA,CAtDA,WAAuCqD,OAAO,EAAE;IAC5C,MAAMqC,gBAAgB,GAAG;MACrB,GAAGrC,OAAO;MACVmB,GAAG,EAAEnB,OAAO,CAACmB,GAAG,CAACmB,OAAO,CAAChD,UAAU,EAAE,EAAEA,UAAU,CAACvB,OAAO,CAACgB,sBAAsB,CAAC;IACrF,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIwD,SAAS,GAAG,KAAK;IACrB,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAEtD,QAAQ,CAAC+B,OAAO,EAAEjB,OAAO,CAAC,CACpCyC,IAAI,CAACvB,GAAG,IAAI;MACbqB,SAAS,GAAG,IAAI;MAChB,OAAOrB,GAAG;IACd,CAAC,CAAC,CACGwB,KAAK,CAACX,GAAG,IAAI;MACd,IAAIQ,SAAS,EAAE;QACX,OAAOI,EAAE;MACb,CAAC,MACI;QACDJ,SAAS,GAAG,IAAI;QAChB,MAAMR,GAAG;MACb;IACJ,CAAC,CAAC;IACF,MAAMY,EAAE,GAAG,CAAC,CAAC,EAAEzD,QAAQ,CAAC+B,OAAO,EAAEoB,gBAAgB,CAAC,CAC7CI,IAAI,CAACvB,GAAG,IAAI;MACbqB,SAAS,GAAG,IAAI;MAChB,OAAOrB,GAAG;IACd,CAAC,CAAC,CACGwB,KAAK,CAACX,GAAG,IAAI;MACd,IAAIQ,SAAS,EAAE;QACX,OAAOC,EAAE;MACb,CAAC,MACI;QACDD,SAAS,GAAG,IAAI;QAChB,MAAMR,GAAG;MACb;IACJ,CAAC,CAAC;IACF,OAAOa,OAAO,CAACC,IAAI,CAAC,CAACL,EAAE,EAAEG,EAAE,CAAC,CAAC;EACjC,CAAC;EAAA,OAAAP,wBAAA,CAAA3B,KAAA,OAAAC,SAAA;AAAA;AAKD,SAAS/B,QAAQA,CAACqB,OAAO,EAAE;EACvB,OAAOK,gBAAgB,CAAC,UAAU,EAAEL,OAAO,CAAC;AAChD;AACAjC,OAAO,CAACY,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA,SAASD,OAAOA,CAACsB,OAAO,EAAE;EACtB,OAAOK,gBAAgB,CAAC,SAAS,EAAEL,OAAO,CAAC;AAC/C;AACAjC,OAAO,CAACW,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA,SAASoE,yBAAyBA,CAAA,EAAG;EACjC,OAAOtD,OAAO,CAACC,GAAG,CAACsD,kBAAkB,GAC/BC,MAAM,CAACxD,OAAO,CAACC,GAAG,CAACsD,kBAAkB,CAAC,GACtC,CAAC;AACX;AACA,IAAIE,yBAAyB;AAC7B;AACA;AACA;AAFA,SAGexE,WAAWA,CAAA;EAAA,OAAAyE,YAAA,CAAAzC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAwC,aAAA;EAAAA,YAAA,GAAAvG,iBAAA,CAA1B,aAA6B;IACzB,IAAI;MACA;MACA;MACA;MACA;MACA,IAAIsG,yBAAyB,KAAK5F,SAAS,EAAE;QACzC4F,yBAAyB,GAAG5C,gBAAgB,CAAC,UAAU,EAAEhD,SAAS,EAAEyF,yBAAyB,EAAE;QAC/F;QACA;QACA;QACA,EAAEtD,OAAO,CAACC,GAAG,CAACC,eAAe,IAAIF,OAAO,CAACC,GAAG,CAACE,iBAAiB,CAAC,CAAC;MACpE;MACA,MAAMsD,yBAAyB;MAC/B,OAAO,IAAI;IACf,CAAC,CACD,OAAOnB,CAAC,EAAE;MACN,MAAMC,GAAG,GAAGD,CAAC;MACb,IAAItC,OAAO,CAACC,GAAG,CAAC0D,UAAU,EAAE;QACxBC,OAAO,CAACC,IAAI,CAACtB,GAAG,CAAC;MACrB;MACA,IAAIA,GAAG,CAACpB,IAAI,KAAK,iBAAiB,EAAE;QAChC;QACA;QACA,OAAO,KAAK;MAChB;MACA,IAAIoB,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC7C,OAAO,KAAK;MAChB,CAAC,MACI;QACD,IAAI,EAAEF,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,CAAC;QAC9C;QACA;QACC,CAACF,GAAG,CAACuB,IAAI,IACN,CAAC,CACG,WAAW,EACX,cAAc,EACd,aAAa,EACb,QAAQ,EACR,WAAW,EACX,cAAc,CACjB,CAACC,QAAQ,CAACxB,GAAG,CAACuB,IAAI,CAAC,CAAC,EAAE;UAC3B,IAAIA,IAAI,GAAG,SAAS;UACpB,IAAIvB,GAAG,CAACuB,IAAI,EACRA,IAAI,GAAGvB,GAAG,CAACuB,IAAI;UACnB9D,OAAO,CAACgE,WAAW,CAAE,+BAA8BzB,GAAG,CAACG,OAAQ,WAAUoB,IAAK,EAAC,EAAE,uBAAuB,CAAC;QAC7G;QACA;QACA,OAAO,KAAK;MAChB;IACJ;EACJ,CAAC;EAAA,OAAAJ,YAAA,CAAAzC,KAAA,OAAAC,SAAA;AAAA;AACD3C,OAAO,CAACU,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA,SAASD,qBAAqBA,CAAA,EAAG;EAC7ByE,yBAAyB,GAAG5F,SAAS;AACzC;AACAU,OAAO,CAACS,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACAT,OAAO,CAACQ,iBAAiB,GAAG,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,eAAeA,CAACF,KAAK,GAAG,IAAI,EAAE;EACnCL,OAAO,CAACQ,iBAAiB,GAAGH,KAAK,KAAK,IAAI,GAAGA,KAAK,GAAG,CAAC,CAAC,EAAEgB,eAAe,CAACqE,kBAAkB,GAAG;AAClG;AACA1F,OAAO,CAACO,eAAe,GAAGA,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,cAAcA,CAAA,EAAG;EACtB;EACA,IAAIN,OAAO,CAACQ,iBAAiB,KAAK,IAAI,EAAE;IACpCR,OAAO,CAACQ,iBAAiB,GAAG,CAAC,CAAC,EAAEa,eAAe,CAACqE,kBAAkB,GAAG;EACzE;EACA,OAAO1F,OAAO,CAACQ,iBAAiB,GAAG,CAAC,GAAG,IAAI;AAC/C;AACAR,OAAO,CAACM,cAAc,GAAGA,cAAc;AACvCP,YAAY,CAAClB,OAAO,CAAC,iBAAiB,CAAC,EAAEmB,OAAO,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
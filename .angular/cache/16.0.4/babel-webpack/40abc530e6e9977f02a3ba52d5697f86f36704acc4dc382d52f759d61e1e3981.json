{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst transporters_1 = require(\"../transporters\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an STS credentials instance.\n   * @param tokenExchangeEndpoint The token exchange endpoint.\n   * @param clientAuthentication The client authentication credentials if\n   *   available.\n   */\n  constructor(tokenExchangeEndpoint, clientAuthentication) {\n    super(clientAuthentication);\n    this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    this.transporter = new transporters_1.DefaultTransporter();\n  }\n  /**\n   * Exchanges the provided token for another type of token based on the\n   * rfc8693 spec.\n   * @param stsCredentialsOptions The token exchange options used to populate\n   *   the token exchange request.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @param options Optional additional GCP-specific non-spec defined options\n   *   to send with the request.\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n   * @return A promise that resolves with the token exchange response containing\n   *   the requested token and its expiration time.\n   */\n  exchangeToken(stsCredentialsOptions, additionalHeaders,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c;\n      const values = {\n        grant_type: stsCredentialsOptions.grantType,\n        resource: stsCredentialsOptions.resource,\n        audience: stsCredentialsOptions.audience,\n        scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n        requested_token_type: stsCredentialsOptions.requestedTokenType,\n        subject_token: stsCredentialsOptions.subjectToken,\n        subject_token_type: stsCredentialsOptions.subjectTokenType,\n        actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n        actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n        // Non-standard GCP-specific options.\n        options: options && JSON.stringify(options)\n      };\n      // Remove undefined fields.\n      Object.keys(values).forEach(key => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof values[key] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          delete values[key];\n        }\n      });\n      const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      // Inject additional STS headers if available.\n      Object.assign(headers, additionalHeaders || {});\n      const opts = {\n        url: _this.tokenExchangeEndpoint,\n        method: 'POST',\n        headers,\n        data: querystring.stringify(values),\n        responseType: 'json'\n      };\n      // Apply OAuth client authentication.\n      _this.applyClientAuthenticationOptions(opts);\n      try {\n        const response = yield _this.transporter.request(opts);\n        // Successful response.\n        const stsSuccessfulResponse = response.data;\n        stsSuccessfulResponse.res = response;\n        return stsSuccessfulResponse;\n      } catch (error) {\n        // Translate error to OAuthError.\n        if (error instanceof gaxios_1.GaxiosError && error.response) {\n          throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data,\n          // Preserve other fields from the original error.\n          error);\n        }\n        // Request could fail before the server responds.\n        throw error;\n      }\n    })();\n  }\n}\nexports.StsCredentials = StsCredentials;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","StsCredentials","gaxios_1","querystring","transporters_1","oauth2common_1","OAuthClientAuthHandler","constructor","tokenExchangeEndpoint","clientAuthentication","transporter","DefaultTransporter","exchangeToken","stsCredentialsOptions","additionalHeaders","options","_this","_a","_b","_c","values","grant_type","grantType","resource","audience","scope","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","actingParty","actorToken","actor_token_type","actorTokenType","JSON","stringify","keys","forEach","key","headers","assign","opts","url","method","data","responseType","applyClientAuthenticationOptions","response","request","stsSuccessfulResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StsCredentials = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst transporters_1 = require(\"../transporters\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an STS credentials instance.\n     * @param tokenExchangeEndpoint The token exchange endpoint.\n     * @param clientAuthentication The client authentication credentials if\n     *   available.\n     */\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\n        super(clientAuthentication);\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n        this.transporter = new transporters_1.DefaultTransporter();\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        var _a, _b, _c;\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options),\n        };\n        // Remove undefined fields.\n        Object.keys(values).forEach(key => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof values[key] === 'undefined') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n            }\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        // Inject additional STS headers if available.\n        Object.assign(headers, additionalHeaders || {});\n        const opts = {\n            url: this.tokenExchangeEndpoint,\n            method: 'POST',\n            headers,\n            data: querystring.stringify(values),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAA,iBAAA,GAAAC,OAAA,uKAAAC,OAAA;AACAC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,QAAQ,GAAGP,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMQ,WAAW,GAAGR,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMS,cAAc,GAAGT,OAAO,CAAC,iBAAiB,CAAC;AACjD,MAAMU,cAAc,GAAGV,OAAO,CAAC,gBAAgB,CAAC;AAChD;AACA;AACA;AACA;AACA,MAAMM,cAAc,SAASI,cAAc,CAACC,sBAAsB,CAAC;EAC/D;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,qBAAqB,EAAEC,oBAAoB,EAAE;IACrD,KAAK,CAACA,oBAAoB,CAAC;IAC3B,IAAI,CAACD,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACE,WAAW,GAAG,IAAIN,cAAc,CAACO,kBAAkB,EAAE;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUC,aAAaA,CAACC,qBAAqB,EAAEC,iBAAiB;EAC5D;EACAC,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAtB,iBAAA;MACL,IAAIuB,EAAE,EAAEC,EAAE,EAAEC,EAAE;MACd,MAAMC,MAAM,GAAG;QACXC,UAAU,EAAER,qBAAqB,CAACS,SAAS;QAC3CC,QAAQ,EAAEV,qBAAqB,CAACU,QAAQ;QACxCC,QAAQ,EAAEX,qBAAqB,CAACW,QAAQ;QACxCC,KAAK,EAAE,CAACR,EAAE,GAAGJ,qBAAqB,CAACY,KAAK,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,IAAI,CAAC,GAAG,CAAC;QAC3FC,oBAAoB,EAAEd,qBAAqB,CAACe,kBAAkB;QAC9DC,aAAa,EAAEhB,qBAAqB,CAACiB,YAAY;QACjDC,kBAAkB,EAAElB,qBAAqB,CAACmB,gBAAgB;QAC1DC,WAAW,EAAE,CAACf,EAAE,GAAGL,qBAAqB,CAACqB,WAAW,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACiB,UAAU;QACxGC,gBAAgB,EAAE,CAACjB,EAAE,GAAGN,qBAAqB,CAACqB,WAAW,MAAM,IAAI,IAAIf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACkB,cAAc;QACjH;QACAtB,OAAO,EAAEA,OAAO,IAAIuB,IAAI,CAACC,SAAS,CAACxB,OAAO;MAC9C,CAAC;MACD;MACAlB,MAAM,CAAC2C,IAAI,CAACpB,MAAM,CAAC,CAACqB,OAAO,CAACC,GAAG,IAAI;QAC/B;QACA,IAAI,OAAOtB,MAAM,CAACsB,GAAG,CAAC,KAAK,WAAW,EAAE;UACpC;UACA,OAAOtB,MAAM,CAACsB,GAAG,CAAC;QACtB;MACJ,CAAC,CAAC;MACF,MAAMC,OAAO,GAAG;QACZ,cAAc,EAAE;MACpB,CAAC;MACD;MACA9C,MAAM,CAAC+C,MAAM,CAACD,OAAO,EAAE7B,iBAAiB,IAAI,CAAC,CAAC,CAAC;MAC/C,MAAM+B,IAAI,GAAG;QACTC,GAAG,EAAE9B,KAAI,CAACR,qBAAqB;QAC/BuC,MAAM,EAAE,MAAM;QACdJ,OAAO;QACPK,IAAI,EAAE7C,WAAW,CAACoC,SAAS,CAACnB,MAAM,CAAC;QACnC6B,YAAY,EAAE;MAClB,CAAC;MACD;MACAjC,KAAI,CAACkC,gCAAgC,CAACL,IAAI,CAAC;MAC3C,IAAI;QACA,MAAMM,QAAQ,SAASnC,KAAI,CAACN,WAAW,CAAC0C,OAAO,CAACP,IAAI,CAAC;QACrD;QACA,MAAMQ,qBAAqB,GAAGF,QAAQ,CAACH,IAAI;QAC3CK,qBAAqB,CAACC,GAAG,GAAGH,QAAQ;QACpC,OAAOE,qBAAqB;MAChC,CAAC,CACD,OAAOE,KAAK,EAAE;QACV;QACA,IAAIA,KAAK,YAAYrD,QAAQ,CAACsD,WAAW,IAAID,KAAK,CAACJ,QAAQ,EAAE;UACzD,MAAM,CAAC,CAAC,EAAE9C,cAAc,CAACoD,8BAA8B,EAAEF,KAAK,CAACJ,QAAQ,CAACH,IAAI;UAC5E;UACAO,KAAK,CAAC;QACV;QACA;QACA,MAAMA,KAAK;MACf;IAAC;EACL;AACJ;AACAxD,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}
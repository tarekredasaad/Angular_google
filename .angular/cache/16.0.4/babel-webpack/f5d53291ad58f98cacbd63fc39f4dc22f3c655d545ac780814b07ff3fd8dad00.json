{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\nconst fs_1 = require(\"fs\");\nconst os_1 = require(\"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\nexports.GCE_LINUX_BIOS_PATHS = {\n  BIOS_DATE: '/sys/class/dmi/id/bios_date',\n  BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor'\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\nfunction isGoogleCloudServerless() {\n  /**\n   * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   *\n   * `FUNCTION_NAME` is used in older Cloud Functions environments:\n   * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n   *\n   * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n   */\n  const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;\n  return !!isGFEnvironment;\n}\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngineLinux() {\n  if ((0, os_1.platform)() !== 'linux') return false;\n  try {\n    // ensure this file exist\n    (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE);\n    // ensure this file exist and matches\n    const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n    return /Google/.test(biosVendor);\n  } catch (_a) {\n    return false;\n  }\n}\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\nfunction isGoogleComputeEngineMACAddress() {\n  const interfaces = (0, os_1.networkInterfaces)();\n  for (const item of Object.values(interfaces)) {\n    if (!item) continue;\n    for (const {\n      mac\n    } of item) {\n      if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngine() {\n  return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\nfunction detectGCPResidency() {\n  return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\nexports.detectGCPResidency = detectGCPResidency;","map":{"version":3,"names":["Object","defineProperty","exports","value","detectGCPResidency","isGoogleComputeEngine","isGoogleComputeEngineMACAddress","isGoogleComputeEngineLinux","isGoogleCloudServerless","GCE_LINUX_BIOS_PATHS","fs_1","require","os_1","BIOS_DATE","BIOS_VENDOR","GCE_MAC_ADDRESS_REGEX","isGFEnvironment","process","env","CLOUD_RUN_JOB","FUNCTION_NAME","K_SERVICE","platform","statSync","biosVendor","readFileSync","test","_a","interfaces","networkInterfaces","item","values","mac"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/gcp-metadata/build/src/gcp-residency.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\nconst fs_1 = require(\"fs\");\nconst os_1 = require(\"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\nexports.GCE_LINUX_BIOS_PATHS = {\n    BIOS_DATE: '/sys/class/dmi/id/bios_date',\n    BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor',\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\nfunction isGoogleCloudServerless() {\n    /**\n     * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     *\n     * `FUNCTION_NAME` is used in older Cloud Functions environments:\n     * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n     *\n     * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n     */\n    const isGFEnvironment = process.env.CLOUD_RUN_JOB ||\n        process.env.FUNCTION_NAME ||\n        process.env.K_SERVICE;\n    return !!isGFEnvironment;\n}\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngineLinux() {\n    if ((0, os_1.platform)() !== 'linux')\n        return false;\n    try {\n        // ensure this file exist\n        (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE);\n        // ensure this file exist and matches\n        const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n        return /Google/.test(biosVendor);\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\nfunction isGoogleComputeEngineMACAddress() {\n    const interfaces = (0, os_1.networkInterfaces)();\n    for (const item of Object.values(interfaces)) {\n        if (!item)\n            continue;\n        for (const { mac } of item) {\n            if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngine() {\n    return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\nfunction detectGCPResidency() {\n    return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\nexports.detectGCPResidency = detectGCPResidency;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
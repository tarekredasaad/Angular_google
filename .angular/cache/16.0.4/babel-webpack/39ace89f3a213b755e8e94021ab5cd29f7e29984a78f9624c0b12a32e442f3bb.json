{"ast":null,"code":"// import { Component, NgZone, OnInit } from '@angular/core';\n// // import { AuthService } from 'src/app/Service/auth.service';\n// import { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\n// import { Subscription } from 'rxjs';\nimport { __decorate } from \"tslib\";\n// import { GoogleAuth } from 'google-auth-library';\n// declare const gapi: any;\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.scss']\n// })\n// export class LoginComponent implements OnInit{\n//   showError:any\n//   user!: SocialUser;\n//   private userSubscription: Subscription | undefined;\n//   constructor(private authService: SocialAuthService,private ngZone: NgZone) {}\n//   ngOnInit(): void {\n//     this.userSubscription = this.authService.authState.subscribe(user => {\n//       this.user = user;\n//     });\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n//       });\n//     });\n//   }\n//   onSignIn(): void {\n//     const auth2 = gapi.auth2.getAuthInstance();\n//     auth2.signIn().then((googleUser: { getAuthResponse: () => { (): any; new(): any; id_token: any; }; }) => {\n//       this.ngZone.run(() => {\n//         const idToken = googleUser.getAuthResponse().id_token;\n//         this.authService.signIn(GoogleLoginProvider.PROVIDER_ID, { idToken }).catch(error => {\n//           console.error('Error signing in:', error);\n//         });\n//       });\n//     });\n//   }\n//   signInWithGoogle(): void {\n//     this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n//       console.error('Error signing in:', error);\n//     });\n//   }\n//   signOut(): void {\n//     this.authService.signOut().catch(error => {\n//       console.error('Error signing out:', error);\n//     });\n//   }\n// //  async ngOnInit(){\n// //   const auth = new GoogleAuth();\n// //   const client = await auth.getClient();\n// // }\n//   // externalLogin = () => {\n//   //   this.showError = false;\n//   //   this.authService.signInWithGoogle();\n//   // }\n// }\nimport { Component, ViewChild } from '@angular/core';\nimport { GoogleLoginProvider } from '@abacritt/angularx-social-login';\nlet LoginComponent = class LoginComponent {\n  constructor(AuthService, authService, ngZone) {\n    this.AuthService = AuthService;\n    this.authService = authService;\n    this.ngZone = ngZone;\n    this.externalLogin = () => {\n      this.showError = false;\n      this.AuthService.signInWithGoogle();\n    };\n  }\n  ngOnInit() {\n    this.authService.authState.subscribe(user => {\n      this.user = user;\n    });\n    this.googleAuthSDK();\n    console.log(this.user);\n    setInterval(() => {\n      if (this.AuthService.user != null) {\n        console.log(\"good\");\n        console.log(this.AuthService.externalAuth);\n        console.log(this.AuthService.user);\n        this.AuthService.sendUserData(this.AuthService.externalAuth).subscribe({\n          next: data => console.log(data),\n          error: err => console.log(err)\n        });\n      }\n    }, 5000);\n  }\n  callLoginButton() {\n    this.auth2.attachClickHandler(this.loginElement.nativeElement, {}, googleAuthUser => {\n      let profile = googleAuthUser.getBasicProfile();\n      console.log('Token || ' + googleAuthUser.getAuthResponse().id_token);\n      console.log('ID: ' + profile.getId());\n      console.log('Name: ' + profile.getName());\n      console.log('Image URL: ' + profile.getImageUrl());\n      console.log('Email: ' + profile.getEmail());\n      /* Write Your Code Here */\n    }, error => {\n      alert(JSON.stringify(error, undefined, 2));\n    });\n  }\n  googleAuthSDK() {\n    window['googleSDKLoaded'] = () => {\n      window['gapi'].load('auth2', () => {\n        this.auth2 = window['gapi'].auth2.init({\n          client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com',\n          cookiepolicy: 'single_host_origin',\n          scope: 'profile email'\n        });\n        this.callLoginButton();\n      });\n    };\n    (function (d, s, id) {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {\n        return;\n      }\n      js = d.createElement('script');\n      js.id = id;\n      js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\n      fjs?.parentNode?.insertBefore(js, fjs);\n    })(document, 'script', 'google-jssdk');\n  }\n  onGoogleSignIn() {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  signInWithGoogle() {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  ngAfterViewInit() {\n    this.renderGoogleSignInButton();\n  }\n  renderGoogleSignInButton() {\n    google.accounts.id.initialize({\n      client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com',\n      callback: response => this.onSignIn()\n    });\n    console.log(\"reach\");\n    google.accounts.id.renderButton(this.googleSignInButton.nativeElement, {\n      theme: 'outline',\n      size: 'large',\n      width: '240',\n      height: '50',\n      longtitle: true\n    });\n  }\n  onSignIn() {\n    // this.ngZone.run(() => {\n    console.log(\"reach on\");\n    // const idToken = response.credential;\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n      console.error('Error signing in:', error);\n    });\n    // });\n  }\n\n  signOut() {\n    this.authService.signOut().catch(error => {\n      console.error('Error signing out:', error);\n    });\n  }\n  ngOnDestroy() {\n    if (this.userSubscription) {\n      this.userSubscription.unsubscribe();\n    }\n  }\n};\n__decorate([ViewChild('googleSignInButton', {\n  static: false\n})], LoginComponent.prototype, \"googleSignInButton\", void 0);\n__decorate([ViewChild('loginRef', {\n  static: false\n})], LoginComponent.prototype, \"loginElement\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","ViewChild","GoogleLoginProvider","LoginComponent","constructor","AuthService","authService","ngZone","externalLogin","showError","signInWithGoogle","ngOnInit","authState","subscribe","user","googleAuthSDK","console","log","setInterval","externalAuth","sendUserData","next","data","error","err","callLoginButton","auth2","attachClickHandler","loginElement","nativeElement","googleAuthUser","profile","getBasicProfile","getAuthResponse","id_token","getId","getName","getImageUrl","getEmail","alert","JSON","stringify","undefined","window","load","init","client_id","cookiepolicy","scope","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","onGoogleSignIn","signIn","PROVIDER_ID","ngAfterViewInit","renderGoogleSignInButton","google","accounts","initialize","callback","response","onSignIn","renderButton","googleSignInButton","theme","size","width","height","longtitle","catch","signOut","ngOnDestroy","userSubscription","unsubscribe","__decorate","static","selector","templateUrl","styleUrls"],"sources":["D:\\graduation project\\Graduation_Project-Dubbizel--main\\Graduation_Project-Dubbizel--main\\Dubbizel_Angular\\src\\app\\Login\\login\\login.component.ts"],"sourcesContent":["// import { Component, NgZone, OnInit } from '@angular/core';\n// // import { AuthService } from 'src/app/Service/auth.service';\n// import { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\n// import { Subscription } from 'rxjs';\n\n// import { GoogleAuth } from 'google-auth-library';\n\n// declare const gapi: any;\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.scss']\n// })\n\n// export class LoginComponent implements OnInit{\n//   showError:any\n//   user!: SocialUser;\n//   private userSubscription: Subscription | undefined;\n\n//   constructor(private authService: SocialAuthService,private ngZone: NgZone) {}\n\n//   ngOnInit(): void {\n//     this.userSubscription = this.authService.authState.subscribe(user => {\n//       this.user = user;\n//     });\n\n//     gapi.load('auth2', () => {\n//       gapi.auth2.init({\n//         client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com'\n\n//       });\n//     });\n//   }\n\n//   onSignIn(): void {\n//     const auth2 = gapi.auth2.getAuthInstance();\n//     auth2.signIn().then((googleUser: { getAuthResponse: () => { (): any; new(): any; id_token: any; }; }) => {\n//       this.ngZone.run(() => {\n//         const idToken = googleUser.getAuthResponse().id_token;\n//         this.authService.signIn(GoogleLoginProvider.PROVIDER_ID, { idToken }).catch(error => {\n//           console.error('Error signing in:', error);\n//         });\n//       });\n//     });\n//   }\n\n\n//   signInWithGoogle(): void {\n//     this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n//       console.error('Error signing in:', error);\n//     });\n//   }\n\n//   signOut(): void {\n//     this.authService.signOut().catch(error => {\n//       console.error('Error signing out:', error);\n//     });\n//   }\n// //  async ngOnInit(){\n// //   const auth = new GoogleAuth();\n// //   const client = await auth.getClient();\n\n// // }\n//   // externalLogin = () => {\n//   //   this.showError = false;\n//   //   this.authService.signInWithGoogle();\n//   // }\n// }\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef, AfterViewInit, NgZone } from '@angular/core';\nimport { SocialAuthService, GoogleLoginProvider , SocialUser } from '@abacritt/angularx-social-login';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/Service/auth.service';\n\ndeclare const google: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy, AfterViewInit {\n  user: any;\n  private userSubscription: any;\n  showError:any\n  @ViewChild('googleSignInButton', { static: false })\n  googleSignInButton!: ElementRef;\n  auth2: any;\n    \n  @ViewChild('loginRef', {static: false }) loginElement!: ElementRef;\n     \n  constructor(private AuthService :AuthService ,private authService: SocialAuthService, private ngZone: NgZone) {}\n\n  ngOnInit(): void {\n     this.authService.authState.subscribe(user => {\n      this.user = user;\n    });\n    this.googleAuthSDK();\n    \n    console.log(this.user)\n    setInterval(() => {\n      \n  \n\n      if(this.AuthService.user != null){\n        console.log(\"good\")\n\n        console.log(this.AuthService.externalAuth)\n        console.log(this.AuthService.user)\n        this.AuthService.sendUserData(this.AuthService.externalAuth).subscribe({\n          next: data => console.log(data),\n          error: err => console.log(err),\n        })\n      }\n    }\n      \n      ,5000)\n  }\n\n  callLoginButton() {\n     \n    this.auth2.attachClickHandler(this.loginElement.nativeElement, {},\n      (googleAuthUser:any) => {\n     \n        let profile = googleAuthUser.getBasicProfile();\n        console.log('Token || ' + googleAuthUser.getAuthResponse().id_token);\n        console.log('ID: ' + profile.getId());\n        console.log('Name: ' + profile.getName());\n        console.log('Image URL: ' + profile.getImageUrl());\n        console.log('Email: ' + profile.getEmail());\n            \n       /* Write Your Code Here */\n    \n      }, (error:any) => {\n        alert(JSON.stringify(error, undefined, 2));\n      });\n \n  }\n  \n  googleAuthSDK() {\n     \n    (<any>window)['googleSDKLoaded'] = () => {\n      (<any>window)['gapi'].load('auth2', () => {\n        this.auth2 = (<any>window)['gapi'].auth2.init({\n          client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com',\n          cookiepolicy: 'single_host_origin',\n          scope: 'profile email'\n        });\n        this.callLoginButton();\n      });\n    }\n\n    (function(d, s, id){\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {return;}\n      js = d.createElement('script'); \n      js.id = id;\n      js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\n      fjs?.parentNode?.insertBefore(js, fjs);\n    }(document, 'script', 'google-jssdk'));\n  }\n\n  onGoogleSignIn(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  externalLogin = () => {\n    this.showError = false;\n    this.AuthService.signInWithGoogle();\n  }\n  signInWithGoogle(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n  ngAfterViewInit(): void {\n    this.renderGoogleSignInButton();\n  }\n\n  renderGoogleSignInButton(): void {\n    google.accounts.id.initialize({\n      client_id: '400690855047-gkqnu3ioohb9vbc0pevpoa5h5eis6oc6.apps.googleusercontent.com',\n      callback: (response:any) => this.onSignIn()\n    });\n    console.log(\"reach\")\n    google.accounts.id.renderButton(this.googleSignInButton.nativeElement, {\n      theme: 'outline',\n      size: 'large',\n      width: '240',\n      height: '50',\n      longtitle: true\n    });\n  }\n\n  onSignIn(): void {\n    // this.ngZone.run(() => {\n      console.log(\"reach on\")\n\n      // const idToken = response.credential;\n      this.authService.signIn(GoogleLoginProvider.PROVIDER_ID).catch(error => {\n        console.error('Error signing in:', error);\n      });\n    // });\n  }\n\n  signOut(): void {\n    this.authService.signOut().catch(error => {\n      console.error('Error signing out:', error);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.userSubscription) {\n      this.userSubscription.unsubscribe();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
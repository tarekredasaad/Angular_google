{"ast":null,"code":"\"use strict\";\n\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compute = void 0;\nconst arrify = require(\"arrify\");\nconst gaxios_1 = require(\"gaxios\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options = {}) {\n    super(options);\n    // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    this.scopes = arrify(options.scopes);\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n  refreshTokenNoCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const tokenPath = `service-accounts/${_this.serviceAccountEmail}/token`;\n      let data;\n      try {\n        const instanceOptions = {\n          property: tokenPath\n        };\n        if (_this.scopes.length > 0) {\n          instanceOptions.params = {\n            scopes: _this.scopes.join(',')\n          };\n        }\n        data = yield gcpMetadata.instance(instanceOptions);\n      } catch (e) {\n        if (e instanceof gaxios_1.GaxiosError) {\n          e.message = `Could not refresh access token: ${e.message}`;\n          _this.wrapError(e);\n        }\n        throw e;\n      }\n      const tokens = data;\n      if (data && data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n      _this.emit('tokens', tokens);\n      return {\n        tokens,\n        res: null\n      };\n    })();\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n  fetchIdToken(targetAudience) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const idTokenPath = `service-accounts/${_this2.serviceAccountEmail}/identity` + `?format=full&audience=${targetAudience}`;\n      let idToken;\n      try {\n        const instanceOptions = {\n          property: idTokenPath\n        };\n        idToken = yield gcpMetadata.instance(instanceOptions);\n      } catch (e) {\n        if (e instanceof Error) {\n          e.message = `Could not fetch ID token: ${e.message}`;\n        }\n        throw e;\n      }\n      return idToken;\n    })();\n  }\n  wrapError(e) {\n    const res = e.response;\n    if (res && res.status) {\n      e.code = res.status.toString();\n      if (res.status === 403) {\n        e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;\n      } else if (res.status === 404) {\n        e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;\n      }\n    }\n  }\n}\nexports.Compute = Compute;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","Compute","arrify","gaxios_1","gcpMetadata","oauth2client_1","OAuth2Client","constructor","options","credentials","expiry_date","refresh_token","serviceAccountEmail","scopes","refreshTokenNoCache","refreshToken","_this","tokenPath","data","instanceOptions","property","length","params","join","instance","e","GaxiosError","message","wrapError","tokens","expires_in","Date","getTime","emit","res","fetchIdToken","targetAudience","_this2","idTokenPath","idToken","Error","response","status","code","toString"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/auth/computeclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Compute = void 0;\nconst arrify = require(\"arrify\");\nconst gaxios_1 = require(\"gaxios\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n        this.scopes = arrify(options.scopes);\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath,\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(','),\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError) {\n                e.message = `Could not refresh access token: ${e.message}`;\n                this.wrapError(e);\n            }\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res: null };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` +\n            `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath,\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Could not fetch ID token: ${e.message}`;\n            }\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.code = res.status.toString();\n            if (res.status === 403) {\n                e.message =\n                    'A Forbidden error was returned while attempting to retrieve an access ' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have the correct permission scopes specified: ' +\n                        e.message;\n            }\n            else if (res.status === 404) {\n                e.message =\n                    'A Not Found error was returned while attempting to retrieve an access' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have any permission scopes specified: ' +\n                        e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nclass AwsRequestSigner {\n  /**\n   * Instantiates an AWS API request signer used to send authenticated signed\n   * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n   * This also provides a mechanism to generate the signed request without\n   * sending it.\n   * @param getCredentials A mechanism to retrieve AWS security credentials\n   *   when needed.\n   * @param region The AWS region to use.\n   */\n  constructor(getCredentials, region) {\n    this.getCredentials = getCredentials;\n    this.region = region;\n    this.crypto = (0, crypto_1.createCrypto)();\n  }\n  /**\n   * Generates the signed request for the provided HTTP request for calling\n   * an AWS API. This follows the steps described at:\n   * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n   * @param amzOptions The AWS request options that need to be signed.\n   * @return A promise that resolves with the GaxiosOptions containing the\n   *   signed HTTP request parameters.\n   */\n  getRequestOptions(amzOptions) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!amzOptions.url) {\n        throw new Error('\"url\" is required in \"amzOptions\"');\n      }\n      // Stringify JSON requests. This will be set in the request body of the\n      // generated signed request.\n      const requestPayloadData = typeof amzOptions.data === 'object' ? JSON.stringify(amzOptions.data) : amzOptions.data;\n      const url = amzOptions.url;\n      const method = amzOptions.method || 'GET';\n      const requestPayload = amzOptions.body || requestPayloadData;\n      const additionalAmzHeaders = amzOptions.headers;\n      const awsSecurityCredentials = yield _this.getCredentials();\n      const uri = new URL(url);\n      const headerMap = yield generateAuthenticationHeaderMap({\n        crypto: _this.crypto,\n        host: uri.host,\n        canonicalUri: uri.pathname,\n        canonicalQuerystring: uri.search.substr(1),\n        method,\n        region: _this.region,\n        securityCredentials: awsSecurityCredentials,\n        requestPayload,\n        additionalAmzHeaders\n      });\n      // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n      const headers = Object.assign(\n      // Add x-amz-date if available.\n      headerMap.amzDate ? {\n        'x-amz-date': headerMap.amzDate\n      } : {}, {\n        Authorization: headerMap.authorizationHeader,\n        host: uri.host\n      }, additionalAmzHeaders || {});\n      if (awsSecurityCredentials.token) {\n        Object.assign(headers, {\n          'x-amz-security-token': awsSecurityCredentials.token\n        });\n      }\n      const awsSignedReq = {\n        url,\n        method: method,\n        headers\n      };\n      if (typeof requestPayload !== 'undefined') {\n        awsSignedReq.body = requestPayload;\n      }\n      return awsSignedReq;\n    })();\n  }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nfunction sign(_x, _x2, _x3) {\n  return _sign.apply(this, arguments);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nfunction _sign() {\n  _sign = _asyncToGenerator(function* (crypto, key, msg) {\n    return yield crypto.signWithHmacSha256(key, msg);\n  });\n  return _sign.apply(this, arguments);\n}\nfunction getSigningKey(_x4, _x5, _x6, _x7, _x8) {\n  return _getSigningKey.apply(this, arguments);\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nfunction _getSigningKey() {\n  _getSigningKey = _asyncToGenerator(function* (crypto, key, dateStamp, region, serviceName) {\n    const kDate = yield sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = yield sign(crypto, kDate, region);\n    const kService = yield sign(crypto, kRegion, serviceName);\n    const kSigning = yield sign(crypto, kService, 'aws4_request');\n    return kSigning;\n  });\n  return _getSigningKey.apply(this, arguments);\n}\nfunction generateAuthenticationHeaderMap(_x9) {\n  return _generateAuthenticationHeaderMap.apply(this, arguments);\n}\nfunction _generateAuthenticationHeaderMap() {\n  _generateAuthenticationHeaderMap = _asyncToGenerator(function* (options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || '';\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split('.')[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now.toISOString().replace(/[-:]/g, '').replace(/\\.[0-9]+/, '');\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach(key => {\n      reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n      reformattedAdditionalAmzHeaders['x-amz-security-token'] = options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n      host: options.host\n    },\n    // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : {\n      'x-amz-date': amzDate\n    }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = '';\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach(key => {\n      canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(';');\n    const payloadHash = yield options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` + `${options.canonicalUri}\\n` + `${options.canonicalQuerystring}\\n` + `${canonicalHeaders}\\n` + `${signedHeaders}\\n` + `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` + `${amzDate}\\n` + `${credentialScope}\\n` + (yield options.crypto.sha256DigestHex(canonicalRequest));\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = yield getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = yield sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` + `${credentialScope}, SignedHeaders=${signedHeaders}, ` + `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n    return {\n      // Do not return x-amz-date if date is available.\n      amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n      authorizationHeader,\n      canonicalQuerystring: options.canonicalQuerystring\n    };\n  });\n  return _generateAuthenticationHeaderMap.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","AwsRequestSigner","crypto_1","AWS_ALGORITHM","AWS_REQUEST_TYPE","constructor","getCredentials","region","crypto","createCrypto","getRequestOptions","amzOptions","_this","url","Error","requestPayloadData","data","JSON","stringify","method","requestPayload","body","additionalAmzHeaders","headers","awsSecurityCredentials","uri","URL","headerMap","generateAuthenticationHeaderMap","host","canonicalUri","pathname","canonicalQuerystring","search","substr","securityCredentials","assign","amzDate","Authorization","authorizationHeader","token","awsSignedReq","sign","_x","_x2","_x3","_sign","apply","arguments","key","msg","signWithHmacSha256","getSigningKey","_x4","_x5","_x6","_x7","_x8","_getSigningKey","dateStamp","serviceName","kDate","kRegion","kService","kSigning","_x9","_generateAuthenticationHeaderMap","options","split","now","Date","toISOString","replace","reformattedAdditionalAmzHeaders","keys","forEach","toLowerCase","amzHeaders","date","canonicalHeaders","signedHeadersList","sort","signedHeaders","join","payloadHash","sha256DigestHex","canonicalRequest","credentialScope","stringToSign","signingKey","secretAccessKey","signature","accessKeyId","fromArrayBufferToHex","undefined"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nclass AwsRequestSigner {\n    /**\n     * Instantiates an AWS API request signer used to send authenticated signed\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n     * This also provides a mechanism to generate the signed request without\n     * sending it.\n     * @param getCredentials A mechanism to retrieve AWS security credentials\n     *   when needed.\n     * @param region The AWS region to use.\n     */\n    constructor(getCredentials, region) {\n        this.getCredentials = getCredentials;\n        this.region = region;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Generates the signed request for the provided HTTP request for calling\n     * an AWS API. This follows the steps described at:\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n     * @param amzOptions The AWS request options that need to be signed.\n     * @return A promise that resolves with the GaxiosOptions containing the\n     *   signed HTTP request parameters.\n     */\n    async getRequestOptions(amzOptions) {\n        if (!amzOptions.url) {\n            throw new Error('\"url\" is required in \"amzOptions\"');\n        }\n        // Stringify JSON requests. This will be set in the request body of the\n        // generated signed request.\n        const requestPayloadData = typeof amzOptions.data === 'object'\n            ? JSON.stringify(amzOptions.data)\n            : amzOptions.data;\n        const url = amzOptions.url;\n        const method = amzOptions.method || 'GET';\n        const requestPayload = amzOptions.body || requestPayloadData;\n        const additionalAmzHeaders = amzOptions.headers;\n        const awsSecurityCredentials = await this.getCredentials();\n        const uri = new URL(url);\n        const headerMap = await generateAuthenticationHeaderMap({\n            crypto: this.crypto,\n            host: uri.host,\n            canonicalUri: uri.pathname,\n            canonicalQuerystring: uri.search.substr(1),\n            method,\n            region: this.region,\n            securityCredentials: awsSecurityCredentials,\n            requestPayload,\n            additionalAmzHeaders,\n        });\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n        const headers = Object.assign(\n        // Add x-amz-date if available.\n        headerMap.amzDate ? { 'x-amz-date': headerMap.amzDate } : {}, {\n            Authorization: headerMap.authorizationHeader,\n            host: uri.host,\n        }, additionalAmzHeaders || {});\n        if (awsSecurityCredentials.token) {\n            Object.assign(headers, {\n                'x-amz-security-token': awsSecurityCredentials.token,\n            });\n        }\n        const awsSignedReq = {\n            url,\n            method: method,\n            headers,\n        };\n        if (typeof requestPayload !== 'undefined') {\n            awsSignedReq.body = requestPayload;\n        }\n        return awsSignedReq;\n    }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nasync function sign(crypto, key, msg) {\n    return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = await sign(crypto, kDate, region);\n    const kService = await sign(crypto, kRegion, serviceName);\n    const kSigning = await sign(crypto, kService, 'aws4_request');\n    return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nasync function generateAuthenticationHeaderMap(options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || '';\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split('.')[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now\n        .toISOString()\n        .replace(/[-:]/g, '')\n        .replace(/\\.[0-9]+/, '');\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach(key => {\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] =\n            additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n        reformattedAdditionalAmzHeaders['x-amz-security-token'] =\n            options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n        host: options.host,\n    }, \n    // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : { 'x-amz-date': amzDate }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = '';\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach(key => {\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(';');\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` +\n        `${options.canonicalUri}\\n` +\n        `${options.canonicalQuerystring}\\n` +\n        `${canonicalHeaders}\\n` +\n        `${signedHeaders}\\n` +\n        `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` +\n        `${amzDate}\\n` +\n        `${credentialScope}\\n` +\n        (await options.crypto.sha256DigestHex(canonicalRequest));\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = await sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` +\n        `${credentialScope}, SignedHeaders=${signedHeaders}, ` +\n        `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n    return {\n        // Do not return x-amz-date if date is available.\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n        authorizationHeader,\n        canonicalQuerystring: options.canonicalQuerystring,\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\nfunction getRetryConfig(_x) {\n  return _getRetryConfig.apply(this, arguments);\n}\nfunction _getRetryConfig() {\n  _getRetryConfig = _asyncToGenerator(function* (err) {\n    var _a;\n    let config = getConfig(err);\n    if (!err || !err.config || !config && !err.config.retry) {\n      return {\n        shouldRetry: false\n      };\n    }\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n    config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries;\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    const retryRanges = [\n    // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199], [429, 429], [500, 599]];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n    // Put the config back into the err\n    err.config.retryConfig = config;\n    // Determine if we should retry the request\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n    if (!(yield shouldRetryFn(err))) {\n      return {\n        shouldRetry: false,\n        config: err.config\n      };\n    }\n    // Calculate time to wait with exponential backoff.\n    // If this is the first retry, look for a configured retryDelay.\n    const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;\n    // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n    const delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000;\n    // We're going to retry!  Incremenent the counter.\n    err.config.retryConfig.currentRetryAttempt += 1;\n    // Create a promise that invokes the retry after the backOffDelay\n    const backoff = config.retryBackoff ? config.retryBackoff(err, delay) : new Promise(resolve => {\n      setTimeout(resolve, delay);\n    });\n    // Notify the user if they added an `onRetryAttempt` handler\n    if (config.onRetryAttempt) {\n      config.onRetryAttempt(err);\n    }\n    // Return the promise in which recalls Gaxios to retry the request\n    yield backoff;\n    return {\n      shouldRetry: true,\n      config: err.config\n    };\n  });\n  return _getRetryConfig.apply(this, arguments);\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n  const config = getConfig(err);\n  // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n  if (err.name === 'AbortError') {\n    return false;\n  }\n  // If there's no config, or retries are disabled, return.\n  if (!config || config.retry === 0) {\n    return false;\n  }\n  // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  }\n  // Only retry with configured HttpMethods.\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  }\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  if (err.response && err.response.status) {\n    let isInRange = false;\n    for (const [min, max] of config.statusCodesToRetry) {\n      const status = err.response.status;\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n    if (!isInRange) {\n      return false;\n    }\n  }\n  // If we are out of retry attempts, return\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n  return;\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","getRetryConfig","_x","_getRetryConfig","apply","arguments","err","_a","config","getConfig","retry","shouldRetry","currentRetryAttempt","undefined","httpMethodsToRetry","noResponseRetries","retryRanges","statusCodesToRetry","retryConfig","shouldRetryFn","shouldRetryRequest","retryDelay","delay","Math","pow","backoff","retryBackoff","Promise","resolve","setTimeout","onRetryAttempt","name","response","method","indexOf","toUpperCase","status","isInRange","min","max"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/gaxios/build/src/retry.js"],"sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRetryConfig = void 0;\nasync function getRetryConfig(err) {\n    var _a;\n    let config = getConfig(err);\n    if (!err || !err.config || (!config && !err.config.retry)) {\n        return { shouldRetry: false };\n    }\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry =\n        config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || [\n        'GET',\n        'HEAD',\n        'PUT',\n        'OPTIONS',\n        'DELETE',\n    ];\n    config.noResponseRetries =\n        config.noResponseRetries === undefined || config.noResponseRetries === null\n            ? 2\n            : config.noResponseRetries;\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    const retryRanges = [\n        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        // 1xx - Retry (Informational, request still processing)\n        // 2xx - Do not retry (Success)\n        // 3xx - Do not retry (Redirect)\n        // 4xx - Do not retry (Client errors)\n        // 429 - Retry (\"Too Many Requests\")\n        // 5xx - Retry (Server errors)\n        [100, 199],\n        [429, 429],\n        [500, 599],\n    ];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n    // Put the config back into the err\n    err.config.retryConfig = config;\n    // Determine if we should retry the request\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n    if (!(await shouldRetryFn(err))) {\n        return { shouldRetry: false, config: err.config };\n    }\n    // Calculate time to wait with exponential backoff.\n    // If this is the first retry, look for a configured retryDelay.\n    const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;\n    // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n    const delay = retryDelay + ((Math.pow(2, config.currentRetryAttempt) - 1) / 2) * 1000;\n    // We're going to retry!  Incremenent the counter.\n    err.config.retryConfig.currentRetryAttempt += 1;\n    // Create a promise that invokes the retry after the backOffDelay\n    const backoff = config.retryBackoff\n        ? config.retryBackoff(err, delay)\n        : new Promise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    // Notify the user if they added an `onRetryAttempt` handler\n    if (config.onRetryAttempt) {\n        config.onRetryAttempt(err);\n    }\n    // Return the promise in which recalls Gaxios to retry the request\n    await backoff;\n    return { shouldRetry: true, config: err.config };\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n    const config = getConfig(err);\n    // node-fetch raises an AbortError if signaled:\n    // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n    if (err.name === 'AbortError') {\n        return false;\n    }\n    // If there's no config, or retries are disabled, return.\n    if (!config || config.retry === 0) {\n        return false;\n    }\n    // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n    if (!err.response &&\n        (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n        return false;\n    }\n    // Only retry with configured HttpMethods.\n    if (!err.config.method ||\n        config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n        return false;\n    }\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    if (err.response && err.response.status) {\n        let isInRange = false;\n        for (const [min, max] of config.statusCodesToRetry) {\n            const status = err.response.status;\n            if (status >= min && status <= max) {\n                isInRange = true;\n                break;\n            }\n        }\n        if (!isInRange) {\n            return false;\n        }\n    }\n    // If we are out of retry attempts, return\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    if (config.currentRetryAttempt >= config.retry) {\n        return false;\n    }\n    return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n    if (err && err.config && err.config.retryConfig) {\n        return err.config.retryConfig;\n    }\n    return;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
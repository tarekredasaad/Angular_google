{"ast":null,"code":"\"use strict\";\n\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnv = exports.clear = exports.GCPEnv = void 0;\nconst gcpMetadata = require(\"gcp-metadata\");\nvar GCPEnv;\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n  envPromise = undefined;\n}\nexports.clear = clear;\nfunction getEnv() {\n  return _getEnv.apply(this, arguments);\n}\nfunction _getEnv() {\n  _getEnv = _asyncToGenerator(function* () {\n    if (envPromise) {\n      return envPromise;\n    }\n    envPromise = getEnvMemoized();\n    return envPromise;\n  });\n  return _getEnv.apply(this, arguments);\n}\nexports.getEnv = getEnv;\nfunction getEnvMemoized() {\n  return _getEnvMemoized.apply(this, arguments);\n}\nfunction _getEnvMemoized() {\n  _getEnvMemoized = _asyncToGenerator(function* () {\n    let env = GCPEnv.NONE;\n    if (isAppEngine()) {\n      env = GCPEnv.APP_ENGINE;\n    } else if (isCloudFunction()) {\n      env = GCPEnv.CLOUD_FUNCTIONS;\n    } else if (yield isComputeEngine()) {\n      if (yield isKubernetesEngine()) {\n        env = GCPEnv.KUBERNETES_ENGINE;\n      } else if (isCloudRun()) {\n        env = GCPEnv.CLOUD_RUN;\n      } else {\n        env = GCPEnv.COMPUTE_ENGINE;\n      }\n    } else {\n      env = GCPEnv.NONE;\n    }\n    return env;\n  });\n  return _getEnvMemoized.apply(this, arguments);\n}\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n  return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\n * This check only verifies that the environment is running knative.\n * This must be run *after* checking for Kubernetes, otherwise it will\n * return a false positive.\n */\nfunction isCloudRun() {\n  return !!process.env.K_CONFIGURATION;\n}\nfunction isKubernetesEngine() {\n  return _isKubernetesEngine.apply(this, arguments);\n}\nfunction _isKubernetesEngine() {\n  _isKubernetesEngine = _asyncToGenerator(function* () {\n    try {\n      yield gcpMetadata.instance('attributes/cluster-name');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n  return _isKubernetesEngine.apply(this, arguments);\n}\nfunction isComputeEngine() {\n  return _isComputeEngine.apply(this, arguments);\n}\nfunction _isComputeEngine() {\n  _isComputeEngine = _asyncToGenerator(function* () {\n    return gcpMetadata.isAvailable();\n  });\n  return _isComputeEngine.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","getEnv","clear","GCPEnv","gcpMetadata","envPromise","undefined","_getEnv","apply","arguments","getEnvMemoized","_getEnvMemoized","env","NONE","isAppEngine","APP_ENGINE","isCloudFunction","CLOUD_FUNCTIONS","isComputeEngine","isKubernetesEngine","KUBERNETES_ENGINE","isCloudRun","CLOUD_RUN","COMPUTE_ENGINE","process","GAE_SERVICE","GAE_MODULE_NAME","FUNCTION_NAME","FUNCTION_TARGET","K_CONFIGURATION","_isKubernetesEngine","instance","e","_isComputeEngine","isAvailable"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/auth/envDetect.js"],"sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnv = exports.clear = exports.GCPEnv = void 0;\nconst gcpMetadata = require(\"gcp-metadata\");\nvar GCPEnv;\n(function (GCPEnv) {\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n    GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n    GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n    envPromise = undefined;\n}\nexports.clear = clear;\nasync function getEnv() {\n    if (envPromise) {\n        return envPromise;\n    }\n    envPromise = getEnvMemoized();\n    return envPromise;\n}\nexports.getEnv = getEnv;\nasync function getEnvMemoized() {\n    let env = GCPEnv.NONE;\n    if (isAppEngine()) {\n        env = GCPEnv.APP_ENGINE;\n    }\n    else if (isCloudFunction()) {\n        env = GCPEnv.CLOUD_FUNCTIONS;\n    }\n    else if (await isComputeEngine()) {\n        if (await isKubernetesEngine()) {\n            env = GCPEnv.KUBERNETES_ENGINE;\n        }\n        else if (isCloudRun()) {\n            env = GCPEnv.CLOUD_RUN;\n        }\n        else {\n            env = GCPEnv.COMPUTE_ENGINE;\n        }\n    }\n    else {\n        env = GCPEnv.NONE;\n    }\n    return env;\n}\nfunction isAppEngine() {\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\n * This check only verifies that the environment is running knative.\n * This must be run *after* checking for Kubernetes, otherwise it will\n * return a false positive.\n */\nfunction isCloudRun() {\n    return !!process.env.K_CONFIGURATION;\n}\nasync function isKubernetesEngine() {\n    try {\n        await gcpMetadata.instance('attributes/cluster-name');\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nasync function isComputeEngine() {\n    return gcpMetadata.isAvailable();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
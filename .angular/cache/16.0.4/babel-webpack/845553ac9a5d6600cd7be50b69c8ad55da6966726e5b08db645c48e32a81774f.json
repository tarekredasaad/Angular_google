{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _asyncToGenerator = require(\"D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an ExternalAccountAuthorizedUserHandler instance.\n   * @param url The URL of the token refresh endpoint.\n   * @param transporter The transporter to use for the refresh request.\n   * @param clientAuthentication The client authentication credentials to use\n   *   for the refresh request.\n   */\n  constructor(url, transporter, clientAuthentication) {\n    super(clientAuthentication);\n    this.url = url;\n    this.transporter = transporter;\n  }\n  /**\n   * Requests a new access token from the token_url endpoint using the provided\n   *   refresh token.\n   * @param refreshToken The refresh token to use to generate a new access token.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @return A promise that resolves with the token refresh response containing\n   *   the requested access token and its expiration time.\n   */\n  refreshToken(refreshToken, additionalHeaders) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const values = new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: refreshToken\n      });\n      const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        ...additionalHeaders\n      };\n      const opts = {\n        url: _this.url,\n        method: 'POST',\n        headers,\n        data: values.toString(),\n        responseType: 'json'\n      };\n      // Apply OAuth client authentication.\n      _this.applyClientAuthenticationOptions(opts);\n      try {\n        const response = yield _this.transporter.request(opts);\n        // Successful response.\n        const tokenRefreshResponse = response.data;\n        tokenRefreshResponse.res = response;\n        return tokenRefreshResponse;\n      } catch (error) {\n        // Translate error to OAuthError.\n        if (error instanceof gaxios_1.GaxiosError && error.response) {\n          throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data,\n          // Preserve other fields from the original error.\n          error);\n        }\n        // Request could fail before the server responds.\n        throw error;\n      }\n    })();\n  }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n  /**\n   * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n   * provided JSON object loaded from a credentials files.\n   * An error is throws if the credential is not valid.\n   * @param options The external account authorized user option object typically\n   *   from the external accoutn authorized user JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super();\n    this.refreshToken = options.refresh_token;\n    const clientAuth = {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    };\n    this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);\n    this.cachedAccessToken = null;\n    this.quotaProjectId = options.quota_project_id;\n    // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n    } else {\n      this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n    this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n  }\n  getAccessToken() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // If cached access token is unavailable or expired, force refresh.\n      if (!_this2.cachedAccessToken || _this2.isExpired(_this2.cachedAccessToken)) {\n        yield _this2.refreshAccessTokenAsync();\n      }\n      // Return GCP access token in GetAccessTokenResponse format.\n      return {\n        token: _this2.cachedAccessToken.access_token,\n        res: _this2.cachedAccessToken.res\n      };\n    })();\n  }\n  getRequestHeaders() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const accessTokenResponse = yield _this3.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessTokenResponse.token}`\n      };\n      return _this3.addSharedMetadataHeaders(headers);\n    })();\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param retry Whether the current attempt is a retry after a failed attempt.\n   * @return A promise that resolves with the successful response.\n   */\n  requestAsync(opts, retry = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      let response;\n      try {\n        const requestHeaders = yield _this4.getRequestHeaders();\n        opts.headers = opts.headers || {};\n        if (requestHeaders && requestHeaders['x-goog-user-project']) {\n          opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n        }\n        if (requestHeaders && requestHeaders.Authorization) {\n          opts.headers.Authorization = requestHeaders.Authorization;\n        }\n        response = yield _this4.transporter.request(opts);\n      } catch (e) {\n        const res = e.response;\n        if (res) {\n          const statusCode = res.status;\n          // Retry the request for metadata if the following criteria are true:\n          // - We haven't already retried.  It only makes sense to retry once.\n          // - The response was a 401 or a 403\n          // - The request didn't send a readableStream\n          // - forceRefreshOnFailure is true\n          const isReadableStream = res.config.data instanceof stream.Readable;\n          const isAuthErr = statusCode === 401 || statusCode === 403;\n          if (!retry && isAuthErr && !isReadableStream && _this4.forceRefreshOnFailure) {\n            yield _this4.refreshAccessTokenAsync();\n            return yield _this4.requestAsync(opts, true);\n          }\n        }\n        throw e;\n      }\n      return response;\n    })();\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * @return A promise that resolves with the refreshed credential.\n   */\n  refreshAccessTokenAsync() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      // Refresh the access token using the refresh token.\n      const refreshResponse = yield _this5.externalAccountAuthorizedUserHandler.refreshToken(_this5.refreshToken);\n      _this5.cachedAccessToken = {\n        access_token: refreshResponse.access_token,\n        expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n        res: refreshResponse.res\n      };\n      if (refreshResponse.refresh_token !== undefined) {\n        _this5.refreshToken = refreshResponse.refresh_token;\n      }\n      return _this5.cachedAccessToken;\n    })();\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param credentials The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n  isExpired(credentials) {\n    const now = new Date().getTime();\n    return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","ExternalAccountAuthorizedUserClient","EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE","authclient_1","oauth2common_1","gaxios_1","stream","baseexternalclient_1","ExternalAccountAuthorizedUserHandler","OAuthClientAuthHandler","constructor","url","transporter","clientAuthentication","refreshToken","additionalHeaders","_this","values","URLSearchParams","grant_type","refresh_token","headers","opts","method","data","toString","responseType","applyClientAuthenticationOptions","response","request","tokenRefreshResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse","AuthClient","options","additionalOptions","clientAuth","confidentialClientType","clientId","client_id","clientSecret","client_secret","externalAccountAuthorizedUserHandler","token_url","cachedAccessToken","quotaProjectId","quota_project_id","eagerRefreshThresholdMillis","EXPIRATION_TIME_OFFSET","forceRefreshOnFailure","getAccessToken","_this2","isExpired","refreshAccessTokenAsync","token","access_token","getRequestHeaders","_this3","accessTokenResponse","Authorization","addSharedMetadataHeaders","callback","requestAsync","then","r","e","retry","_this4","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","_this5","refreshResponse","expiry_date","Date","getTime","expires_in","undefined","credentials","now"],"sources":["D:/graduation project/Graduation_Project-Dubbizel--main/Graduation_Project-Dubbizel--main/Dubbizel_Angular/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */\n    constructor(url, transporter, clientAuthentication) {\n        super(clientAuthentication);\n        this.url = url;\n        this.transporter = transporter;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */\n    async refreshToken(refreshToken, additionalHeaders) {\n        const values = new URLSearchParams({\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            ...additionalHeaders,\n        };\n        const opts = {\n            url: this.url,\n            method: 'POST',\n            headers,\n            data: values.toString(),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super();\n        this.refreshToken = options.refresh_token;\n        const clientAuth = {\n            confidentialClientType: 'basic',\n            clientId: options.client_id,\n            clientSecret: options.client_secret,\n        };\n        this.externalAccountAuthorizedUserHandler =\n            new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */\n    async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res,\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date\n            ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}